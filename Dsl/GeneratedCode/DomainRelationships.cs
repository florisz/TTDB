//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship ModelRootHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelRootHasComments.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelRootHasComments.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("dc7ec268-8ceb-48f6-bd60-1b5670cdc908")]
	public partial class ModelRootHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdc7ec268, 0x8ceb, 0x48f6, 0xbd, 0x60, 0x1b, 0x56, 0x70, 0xcd, 0xc9, 0x08);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasComments link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelRootHasComments(ModelRoot source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasComments.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xa8b35e0b, 0xa400, 0x40e5, 0xbb, 0x9c, 0xba, 0xbc, 0xd2, 0x26, 0x05, 0xf1);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelRootHasComments/ModelRoot.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelRootHasComments/ModelRoot.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="Luminis.Its.Workbench.ModelRootHasComments/ModelRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a8b35e0b-a400-40e5-bb9c-babcd22605f1")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Comment
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Comment element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModelRoot);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xd25b9667, 0xa751, 0x4355, 0xa9, 0xe5, 0xd3, 0xc5, 0xee, 0x72, 0xfc, 0xc9);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelRootHasComments/Comment.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelRootHasComments/Comment.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="Luminis.Its.Workbench.ModelRootHasComments/Comment.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d25b9667-a751-4355-a9e5-d3c5ee72fcc9")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelRoot
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelRoot element)
		{
			return new DslModeling::LinkedElementCollection<Comment>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasComments links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.ModelRootHasComments> GetLinksToComments ( global::Luminis.Its.Workbench.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelRootHasComments>(modelRootInstance, global::Luminis.Its.Workbench.ModelRootHasComments.ModelRootDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelRootHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.ModelRootHasComments GetLinkToModelRoot (global::Luminis.Its.Workbench.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelRootHasComments>(commentInstance, global::Luminis.Its.Workbench.ModelRootHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasComments instance accessors
		
		/// <summary>
		/// Get any ModelRootHasComments links between a given ModelRoot and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.ModelRootHasComments> GetLinks( global::Luminis.Its.Workbench.ModelRoot source, global::Luminis.Its.Workbench.Comment target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.ModelRootHasComments> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.ModelRootHasComments>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelRootHasComments>(source, global::Luminis.Its.Workbench.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasComments link between a given ModelRootand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.ModelRootHasComments GetLink( global::Luminis.Its.Workbench.ModelRoot source, global::Luminis.Its.Workbench.Comment target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelRootHasComments>(source, global::Luminis.Its.Workbench.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CommentReferencesSubjects.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.CommentReferencesSubjects.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("08a6b183-a158-4cde-8b06-c882175e651c")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x08a6b183, 0xa158, 0x4cde, 0x8b, 0x06, 0xc8, 0x82, 0x17, 0x5e, 0x65, 0x1c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xfcb5b49f, 0xd852, 0x4cf9, 0x87, 0xd5, 0x19, 0xee, 0x3a, 0x6b, 0xbf, 0xe8);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CommentReferencesSubjects/Comment.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CommentReferencesSubjects/Comment.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="Luminis.Its.Workbench.CommentReferencesSubjects/Comment.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fcb5b49f-d852-4cf9-87d5-19ee3a6bbfe8")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelType
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelType element)
		{
			return new DslModeling::LinkedElementCollection<Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x20841cfe, 0x4c2e, 0x4fb6, 0x90, 0x63, 0xdd, 0xfd, 0x3a, 0x12, 0xd6, 0xaf);
		
		/// <summary>
		/// DomainRole Subject
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CommentReferencesSubjects/Subject.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CommentReferencesSubjects/Subject.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="Luminis.Its.Workbench.CommentReferencesSubjects/Subject.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("20841cfe-4c2e-4fb6-9063-ddfd3a12d6af")]
		public virtual ModelType Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetSubjects(Comment element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CommentReferencesSubjects> GetLinksToSubjects ( global::Luminis.Its.Workbench.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CommentReferencesSubjects>(commentInstance, global::Luminis.Its.Workbench.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CommentReferencesSubjects> GetLinksToComments ( global::Luminis.Its.Workbench.ModelType subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CommentReferencesSubjects>(subjectInstance, global::Luminis.Its.Workbench.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CommentReferencesSubjects> GetLinks( global::Luminis.Its.Workbench.Comment source, global::Luminis.Its.Workbench.ModelType target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CommentReferencesSubjects>(source, global::Luminis.Its.Workbench.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CommentReferencesSubjects GetLink( global::Luminis.Its.Workbench.Comment source, global::Luminis.Its.Workbench.ModelType target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CommentReferencesSubjects>(source, global::Luminis.Its.Workbench.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship HasObjectModelSpec
	/// Description for Luminis.Its.Workbench.HasObjectModelSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.HasObjectModelSpec.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.HasObjectModelSpec.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0f794286-0553-4212-9907-2b583ad47b01")]
	public partial class HasObjectModelSpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// HasObjectModelSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0f794286, 0x0553, 0x4212, 0x99, 0x07, 0x2b, 0x58, 0x3a, 0xd4, 0x7b, 0x01);
	
				
		/// <summary>
		/// Constructor
		/// Creates a HasObjectModelSpec link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ObjectModelSpec to use as the target of the relationship.</param>
		public HasObjectModelSpec(ModelRoot source, ObjectModelSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HasObjectModelSpec.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(HasObjectModelSpec.ObjectModelSpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HasObjectModelSpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HasObjectModelSpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HasObjectModelSpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HasObjectModelSpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x25f6da19, 0x3fbe, 0x47d4, 0x8c, 0x72, 0x62, 0x8c, 0x85, 0x06, 0x32, 0x1e);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for Luminis.Its.Workbench.HasObjectModelSpec.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.HasObjectModelSpec/ModelRoot.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.HasObjectModelSpec/ModelRoot.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ObjectModelSpec", PropertyDisplayNameKey="Luminis.Its.Workbench.HasObjectModelSpec/ModelRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("25f6da19-3fbe-47d4-8c72-628c8506321e")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ObjectModelSpec
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ObjectModelSpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ObjectModelSpecDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ObjectModelSpec element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ObjectModelSpecDomainRoleId, newModelRoot);
		}
		#endregion
		#region ObjectModelSpec domain role code
		
		/// <summary>
		/// ObjectModelSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectModelSpecDomainRoleId = new global::System.Guid(0x02e1293a, 0x27b2, 0x4b89, 0x89, 0xa8, 0x85, 0xad, 0x86, 0x38, 0x9c, 0x3c);
		
		/// <summary>
		/// DomainRole ObjectModelSpec
		/// Description for Luminis.Its.Workbench.HasObjectModelSpec.ObjectModelSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.HasObjectModelSpec/ObjectModelSpec.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.HasObjectModelSpec/ObjectModelSpec.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="Luminis.Its.Workbench.HasObjectModelSpec/ObjectModelSpec.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("02e1293a-27b2-4b89-89a8-85ad86389c3c")]
		public virtual ObjectModelSpec ObjectModelSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectModelSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectModelSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectModelSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectModelSpec of a ModelRoot
		/// <summary>
		/// Gets ObjectModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectModelSpec GetObjectModelSpec(ModelRoot element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelRootDomainRoleId) as ObjectModelSpec;
		}
		
		/// <summary>
		/// Sets ObjectModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectModelSpec(ModelRoot element, ObjectModelSpec newObjectModelSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelRootDomainRoleId, newObjectModelSpec);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the HasObjectModelSpec link to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.HasObjectModelSpec GetLinkToObjectModelSpec (global::Luminis.Its.Workbench.ModelRoot modelRootInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.HasObjectModelSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.HasObjectModelSpec>(modelRootInstance, global::Luminis.Its.Workbench.HasObjectModelSpec.ModelRootDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelRoot not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectModelSpec link accessor
		/// <summary>
		/// Get the HasObjectModelSpec link to a ObjectModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.HasObjectModelSpec GetLinkToModelRoot (global::Luminis.Its.Workbench.ObjectModelSpec objectModelSpecInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.HasObjectModelSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.HasObjectModelSpec>(objectModelSpecInstance, global::Luminis.Its.Workbench.HasObjectModelSpec.ObjectModelSpecDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ObjectModelSpec not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HasObjectModelSpec instance accessors
		
		/// <summary>
		/// Get any HasObjectModelSpec links between a given ModelRoot and a ObjectModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.HasObjectModelSpec> GetLinks( global::Luminis.Its.Workbench.ModelRoot source, global::Luminis.Its.Workbench.ObjectModelSpec target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.HasObjectModelSpec> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.HasObjectModelSpec>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.HasObjectModelSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.HasObjectModelSpec>(source, global::Luminis.Its.Workbench.HasObjectModelSpec.ModelRootDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.HasObjectModelSpec link in links )
			{
				if ( target.Equals(link.ObjectModelSpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HasObjectModelSpec link between a given ModelRootand a ObjectModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.HasObjectModelSpec GetLink( global::Luminis.Its.Workbench.ModelRoot source, global::Luminis.Its.Workbench.ObjectModelSpec target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.HasObjectModelSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.HasObjectModelSpec>(source, global::Luminis.Its.Workbench.HasObjectModelSpec.ModelRootDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.HasObjectModelSpec link in links )
			{
				if ( target.Equals(link.ObjectModelSpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship ObjectModelSpecHasTypes
	/// Description for Luminis.Its.Workbench.ObjectModelSpecHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ObjectModelSpecHasTypes.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ObjectModelSpecHasTypes.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a7a698f4-e5f4-4fc0-ba57-27718c61b447")]
	public partial class ObjectModelSpecHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectModelSpecHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7a698f4, 0xe5f4, 0x4fc0, 0xba, 0x57, 0x27, 0x71, 0x8c, 0x61, 0xb4, 0x47);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectModelSpecHasTypes link in the same Partition as the given ObjectModelSpec
		/// </summary>
		/// <param name="source">ObjectModelSpec to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ObjectModelSpecHasTypes(ObjectModelSpec source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectModelSpecHasTypes.ObjectModelSpecDomainRoleId, source), new DslModeling::RoleAssignment(ObjectModelSpecHasTypes.ModelTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectModelSpecHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectModelSpecHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectModelSpecHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectModelSpecHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectModelSpec domain role code
		
		/// <summary>
		/// ObjectModelSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectModelSpecDomainRoleId = new global::System.Guid(0x067ab529, 0x9b66, 0x4c65, 0x8e, 0x84, 0xdb, 0x42, 0x44, 0x00, 0x33, 0x0f);
		
		/// <summary>
		/// DomainRole ObjectModelSpec
		/// Description for Luminis.Its.Workbench.ObjectModelSpecHasTypes.ObjectModelSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ObjectModelSpecHasTypes/ObjectModelSpec.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ObjectModelSpecHasTypes/ObjectModelSpec.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="Luminis.Its.Workbench.ObjectModelSpecHasTypes/ObjectModelSpec.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("067ab529-9b66-4c65-8e84-db424400330f")]
		public virtual ObjectModelSpec ObjectModelSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectModelSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectModelSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectModelSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectModelSpec of a ModelType
		/// <summary>
		/// Gets ObjectModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectModelSpec GetObjectModelSpec(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelTypeDomainRoleId) as ObjectModelSpec;
		}
		
		/// <summary>
		/// Sets ObjectModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectModelSpec(ModelType element, ObjectModelSpec newObjectModelSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelTypeDomainRoleId, newObjectModelSpec);
		}
		#endregion
		#region ModelType domain role code
		
		/// <summary>
		/// ModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTypeDomainRoleId = new global::System.Guid(0x60c89952, 0x6e1d, 0x4f56, 0x98, 0x85, 0x7b, 0xa5, 0x19, 0xb5, 0x77, 0x62);
		
		/// <summary>
		/// DomainRole ModelType
		/// Description for Luminis.Its.Workbench.ObjectModelSpecHasTypes.ModelType
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ObjectModelSpecHasTypes/ModelType.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ObjectModelSpecHasTypes/ModelType.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectModelSpec", PropertyDisplayNameKey="Luminis.Its.Workbench.ObjectModelSpecHasTypes/ModelType.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("60c89952-6e1d-4f56-9885-7ba519b57762")]
		public virtual ModelType ModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a ObjectModelSpec
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetTypes(ObjectModelSpec element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, ObjectModelSpecDomainRoleId);
		}
		#endregion
		#region ObjectModelSpec link accessor
		/// <summary>
		/// Get the list of ObjectModelSpecHasTypes links to a ObjectModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.ObjectModelSpecHasTypes> GetLinksToTypes ( global::Luminis.Its.Workbench.ObjectModelSpec objectModelSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ObjectModelSpecHasTypes>(objectModelSpecInstance, global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.ObjectModelSpecDomainRoleId);
		}
		#endregion
		#region ModelType link accessor
		/// <summary>
		/// Get the ObjectModelSpecHasTypes link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.ObjectModelSpecHasTypes GetLinkToObjectModelSpec (global::Luminis.Its.Workbench.ModelType modelTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.ObjectModelSpecHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ObjectModelSpecHasTypes>(modelTypeInstance, global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.ModelTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectModelSpecHasTypes instance accessors
		
		/// <summary>
		/// Get any ObjectModelSpecHasTypes links between a given ObjectModelSpec and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.ObjectModelSpecHasTypes> GetLinks( global::Luminis.Its.Workbench.ObjectModelSpec source, global::Luminis.Its.Workbench.ModelType target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.ObjectModelSpecHasTypes> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.ObjectModelSpecHasTypes>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.ObjectModelSpecHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ObjectModelSpecHasTypes>(source, global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.ObjectModelSpecDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.ObjectModelSpecHasTypes link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectModelSpecHasTypes link between a given ObjectModelSpecand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.ObjectModelSpecHasTypes GetLink( global::Luminis.Its.Workbench.ObjectModelSpec source, global::Luminis.Its.Workbench.ModelType target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.ObjectModelSpecHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ObjectModelSpecHasTypes>(source, global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.ObjectModelSpecDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.ObjectModelSpecHasTypes link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship HasCaseFileModelSpec
	/// Description for Luminis.Its.Workbench.HasCaseFileModelSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.HasCaseFileModelSpec.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.HasCaseFileModelSpec.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a5b5cb47-5034-45e0-9d45-a73a1c0f81d6")]
	public partial class HasCaseFileModelSpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// HasCaseFileModelSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa5b5cb47, 0x5034, 0x45e0, 0x9d, 0x45, 0xa7, 0x3a, 0x1c, 0x0f, 0x81, 0xd6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a HasCaseFileModelSpec link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">CaseFileModelSpec to use as the target of the relationship.</param>
		public HasCaseFileModelSpec(ModelRoot source, CaseFileModelSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HasCaseFileModelSpec.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(HasCaseFileModelSpec.CaseFileModelSpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HasCaseFileModelSpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HasCaseFileModelSpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HasCaseFileModelSpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HasCaseFileModelSpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x3184ae2a, 0x45b8, 0x40be, 0x8f, 0x92, 0xa7, 0xfa, 0x08, 0x2f, 0x44, 0x60);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for Luminis.Its.Workbench.HasCaseFileModelSpec.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.HasCaseFileModelSpec/ModelRoot.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.HasCaseFileModelSpec/ModelRoot.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CaseFileModelSpecs", PropertyDisplayNameKey="Luminis.Its.Workbench.HasCaseFileModelSpec/ModelRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3184ae2a-45b8-40be-8f92-a7fa082f4460")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a CaseFileModelSpec
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(CaseFileModelSpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CaseFileModelSpecDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(CaseFileModelSpec element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CaseFileModelSpecDomainRoleId, newModelRoot);
		}
		#endregion
		#region CaseFileModelSpec domain role code
		
		/// <summary>
		/// CaseFileModelSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid CaseFileModelSpecDomainRoleId = new global::System.Guid(0x77969aed, 0x5c59, 0x4a40, 0x99, 0x5f, 0xe7, 0xb3, 0x60, 0xd3, 0x52, 0xf4);
		
		/// <summary>
		/// DomainRole CaseFileModelSpec
		/// Description for Luminis.Its.Workbench.HasCaseFileModelSpec.CaseFileModelSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.HasCaseFileModelSpec/CaseFileModelSpec.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.HasCaseFileModelSpec/CaseFileModelSpec.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="Luminis.Its.Workbench.HasCaseFileModelSpec/CaseFileModelSpec.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("77969aed-5c59-4a40-995f-e7b360d352f4")]
		public virtual CaseFileModelSpec CaseFileModelSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CaseFileModelSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, CaseFileModelSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CaseFileModelSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CaseFileModelSpecs of a ModelRoot
		/// <summary>
		/// Gets a list of CaseFileModelSpecs.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CaseFileModelSpec> GetCaseFileModelSpecs(ModelRoot element)
		{
			return new DslModeling::LinkedElementCollection<CaseFileModelSpec>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of HasCaseFileModelSpec links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.HasCaseFileModelSpec> GetLinksToCaseFileModelSpecs ( global::Luminis.Its.Workbench.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.HasCaseFileModelSpec>(modelRootInstance, global::Luminis.Its.Workbench.HasCaseFileModelSpec.ModelRootDomainRoleId);
		}
		#endregion
		#region CaseFileModelSpec link accessor
		/// <summary>
		/// Get the HasCaseFileModelSpec link to a CaseFileModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.HasCaseFileModelSpec GetLinkToModelRoot (global::Luminis.Its.Workbench.CaseFileModelSpec caseFileModelSpecInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.HasCaseFileModelSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.HasCaseFileModelSpec>(caseFileModelSpecInstance, global::Luminis.Its.Workbench.HasCaseFileModelSpec.CaseFileModelSpecDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CaseFileModelSpec not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HasCaseFileModelSpec instance accessors
		
		/// <summary>
		/// Get any HasCaseFileModelSpec links between a given ModelRoot and a CaseFileModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.HasCaseFileModelSpec> GetLinks( global::Luminis.Its.Workbench.ModelRoot source, global::Luminis.Its.Workbench.CaseFileModelSpec target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.HasCaseFileModelSpec> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.HasCaseFileModelSpec>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.HasCaseFileModelSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.HasCaseFileModelSpec>(source, global::Luminis.Its.Workbench.HasCaseFileModelSpec.ModelRootDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.HasCaseFileModelSpec link in links )
			{
				if ( target.Equals(link.CaseFileModelSpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HasCaseFileModelSpec link between a given ModelRootand a CaseFileModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.HasCaseFileModelSpec GetLink( global::Luminis.Its.Workbench.ModelRoot source, global::Luminis.Its.Workbench.CaseFileModelSpec target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.HasCaseFileModelSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.HasCaseFileModelSpec>(source, global::Luminis.Its.Workbench.HasCaseFileModelSpec.ModelRootDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.HasCaseFileModelSpec link in links )
			{
				if ( target.Equals(link.CaseFileModelSpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship CaseFileModelSpecHasCaseFileTypes
	/// Description for Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("19f6741d-6d88-4934-abb0-9dfcb70ed514")]
	public partial class CaseFileModelSpecHasCaseFileTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CaseFileModelSpecHasCaseFileTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x19f6741d, 0x6d88, 0x4934, 0xab, 0xb0, 0x9d, 0xfc, 0xb7, 0x0e, 0xd5, 0x14);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CaseFileModelSpecHasCaseFileTypes link in the same Partition as the given CaseFileModelSpec
		/// </summary>
		/// <param name="source">CaseFileModelSpec to use as the source of the relationship.</param>
		/// <param name="target">CaseFileType to use as the target of the relationship.</param>
		public CaseFileModelSpecHasCaseFileTypes(CaseFileModelSpec source, CaseFileType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CaseFileModelSpecHasCaseFileTypes.CaseFileModelSpecDomainRoleId, source), new DslModeling::RoleAssignment(CaseFileModelSpecHasCaseFileTypes.CaseFileTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CaseFileModelSpecHasCaseFileTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CaseFileModelSpecHasCaseFileTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CaseFileModelSpecHasCaseFileTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CaseFileModelSpecHasCaseFileTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CaseFileModelSpec domain role code
		
		/// <summary>
		/// CaseFileModelSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid CaseFileModelSpecDomainRoleId = new global::System.Guid(0xcdb0c109, 0xd7b6, 0x446c, 0x95, 0xf8, 0x8d, 0xf1, 0xc9, 0x6a, 0xcc, 0xc1);
		
		/// <summary>
		/// DomainRole CaseFileModelSpec
		/// Description for
		/// Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileModelSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes/CaseFileModelSpec.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes/CaseFileModelSpec.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CaseFileTypes", PropertyDisplayNameKey="Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes/CaseFileModelSpec.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cdb0c109-d7b6-446c-95f8-8df1c96accc1")]
		public virtual CaseFileModelSpec CaseFileModelSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CaseFileModelSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, CaseFileModelSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CaseFileModelSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CaseFileModelSpec of a CaseFileType
		/// <summary>
		/// Gets CaseFileModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CaseFileModelSpec GetCaseFileModelSpec(CaseFileType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CaseFileTypeDomainRoleId) as CaseFileModelSpec;
		}
		
		/// <summary>
		/// Sets CaseFileModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCaseFileModelSpec(CaseFileType element, CaseFileModelSpec newCaseFileModelSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CaseFileTypeDomainRoleId, newCaseFileModelSpec);
		}
		#endregion
		#region CaseFileType domain role code
		
		/// <summary>
		/// CaseFileType domain role Id.
		/// </summary>
		public static readonly global::System.Guid CaseFileTypeDomainRoleId = new global::System.Guid(0xe3273e02, 0x519f, 0x48b9, 0xa6, 0x31, 0x68, 0xed, 0x02, 0x33, 0x47, 0xed);
		
		/// <summary>
		/// DomainRole CaseFileType
		/// Description for
		/// Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileType
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes/CaseFileType.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes/CaseFileType.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CaseFileModelSpec", PropertyDisplayNameKey="Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes/CaseFileType.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e3273e02-519f-48b9-a631-68ed023347ed")]
		public virtual CaseFileType CaseFileType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CaseFileType)DslModeling::DomainRoleInfo.GetRolePlayer(this, CaseFileTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CaseFileTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CaseFileTypes of a CaseFileModelSpec
		/// <summary>
		/// Gets a list of CaseFileTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CaseFileType> GetCaseFileTypes(CaseFileModelSpec element)
		{
			return new DslModeling::LinkedElementCollection<CaseFileType>(element, CaseFileModelSpecDomainRoleId);
		}
		#endregion
		#region CaseFileModelSpec link accessor
		/// <summary>
		/// Get the list of CaseFileModelSpecHasCaseFileTypes links to a CaseFileModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes> GetLinksToCaseFileTypes ( global::Luminis.Its.Workbench.CaseFileModelSpec caseFileModelSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes>(caseFileModelSpecInstance, global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileModelSpecDomainRoleId);
		}
		#endregion
		#region CaseFileType link accessor
		/// <summary>
		/// Get the CaseFileModelSpecHasCaseFileTypes link to a CaseFileType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes GetLinkToCaseFileModelSpec (global::Luminis.Its.Workbench.CaseFileType caseFileTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes>(caseFileTypeInstance, global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CaseFileType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CaseFileModelSpecHasCaseFileTypes instance accessors
		
		/// <summary>
		/// Get any CaseFileModelSpecHasCaseFileTypes links between a given CaseFileModelSpec and a CaseFileType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes> GetLinks( global::Luminis.Its.Workbench.CaseFileModelSpec source, global::Luminis.Its.Workbench.CaseFileType target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes>(source, global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileModelSpecDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes link in links )
			{
				if ( target.Equals(link.CaseFileType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CaseFileModelSpecHasCaseFileTypes link between a given CaseFileModelSpecand a CaseFileType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes GetLink( global::Luminis.Its.Workbench.CaseFileModelSpec source, global::Luminis.Its.Workbench.CaseFileType target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes>(source, global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileModelSpecDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes link in links )
			{
				if ( target.Equals(link.CaseFileType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship ModelTypeHasAttributes
	/// Description for Luminis.Its.Workbench.ModelTypeHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelTypeHasAttributes.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelTypeHasAttributes.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a7204501-b65d-46cb-8524-a0fc1c23f719")]
	public partial class ModelTypeHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTypeHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7204501, 0xb65d, 0x46cb, 0x85, 0x24, 0xa0, 0xfc, 0x1c, 0x23, 0xf7, 0x19);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTypeHasAttributes link in the same Partition as the given ModelType
		/// </summary>
		/// <param name="source">ModelType to use as the source of the relationship.</param>
		/// <param name="target">ModelAttribute to use as the target of the relationship.</param>
		public ModelTypeHasAttributes(ModelType source, ModelAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTypeHasAttributes.ModelTypeDomainRoleId, source), new DslModeling::RoleAssignment(ModelTypeHasAttributes.ModelAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelType domain role code
		
		/// <summary>
		/// ModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTypeDomainRoleId = new global::System.Guid(0x25aa9c3c, 0x0dfe, 0x417b, 0xb8, 0xd0, 0x91, 0x32, 0x64, 0xa6, 0x9e, 0xe7);
		
		/// <summary>
		/// DomainRole ModelType
		/// Description for Luminis.Its.Workbench.ModelTypeHasAttributes.ModelType
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelTypeHasAttributes/ModelType.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelTypeHasAttributes/ModelType.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="Luminis.Its.Workbench.ModelTypeHasAttributes/ModelType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("25aa9c3c-0dfe-417b-b8d0-913264a69ee7")]
		public virtual ModelType ModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelType of a ModelAttribute
		/// <summary>
		/// Gets ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelType GetModelType(ModelAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelAttributeDomainRoleId) as ModelType;
		}
		
		/// <summary>
		/// Sets ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelType(ModelAttribute element, ModelType newModelType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelAttributeDomainRoleId, newModelType);
		}
		#endregion
		#region ModelAttribute domain role code
		
		/// <summary>
		/// ModelAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelAttributeDomainRoleId = new global::System.Guid(0xa261e219, 0xf3d2, 0x491e, 0xa8, 0x85, 0x1f, 0xed, 0x2a, 0x0e, 0x4b, 0x23);
		
		/// <summary>
		/// DomainRole ModelAttribute
		/// Description for Luminis.Its.Workbench.ModelTypeHasAttributes.ModelAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelTypeHasAttributes/ModelAttribute.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelTypeHasAttributes/ModelAttribute.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelType", PropertyDisplayNameKey="Luminis.Its.Workbench.ModelTypeHasAttributes/ModelAttribute.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a261e219-f3d2-491e-a885-1fed2a0e4b23")]
		public virtual ModelAttribute ModelAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a ModelType
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelAttribute> GetAttributes(ModelType element)
		{
			return new DslModeling::LinkedElementCollection<ModelAttribute>(element, ModelTypeDomainRoleId);
		}
		#endregion
		#region ModelType link accessor
		/// <summary>
		/// Get the list of ModelTypeHasAttributes links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.ModelTypeHasAttributes> GetLinksToAttributes ( global::Luminis.Its.Workbench.ModelType modelTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelTypeHasAttributes>(modelTypeInstance, global::Luminis.Its.Workbench.ModelTypeHasAttributes.ModelTypeDomainRoleId);
		}
		#endregion
		#region ModelAttribute link accessor
		/// <summary>
		/// Get the ModelTypeHasAttributes link to a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.ModelTypeHasAttributes GetLinkToModelType (global::Luminis.Its.Workbench.ModelAttribute modelAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.ModelTypeHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelTypeHasAttributes>(modelAttributeInstance, global::Luminis.Its.Workbench.ModelTypeHasAttributes.ModelAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTypeHasAttributes instance accessors
		
		/// <summary>
		/// Get any ModelTypeHasAttributes links between a given ModelType and a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.ModelTypeHasAttributes> GetLinks( global::Luminis.Its.Workbench.ModelType source, global::Luminis.Its.Workbench.ModelAttribute target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.ModelTypeHasAttributes> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.ModelTypeHasAttributes>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.ModelTypeHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelTypeHasAttributes>(source, global::Luminis.Its.Workbench.ModelTypeHasAttributes.ModelTypeDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.ModelTypeHasAttributes link in links )
			{
				if ( target.Equals(link.ModelAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTypeHasAttributes link between a given ModelTypeand a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.ModelTypeHasAttributes GetLink( global::Luminis.Its.Workbench.ModelType source, global::Luminis.Its.Workbench.ModelAttribute target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.ModelTypeHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelTypeHasAttributes>(source, global::Luminis.Its.Workbench.ModelTypeHasAttributes.ModelTypeDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.ModelTypeHasAttributes link in links )
			{
				if ( target.Equals(link.ModelAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship EntityHasRelations
	/// Description for Luminis.Its.Workbench.EntityHasRelations
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.EntityHasRelations.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.EntityHasRelations.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("553b62d1-12ee-4cbe-8965-0f16b4b1ce70")]
	public partial class EntityHasRelations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasRelations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x553b62d1, 0x12ee, 0x4cbe, 0x89, 0x65, 0x0f, 0x16, 0xb4, 0xb1, 0xce, 0x70);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasRelations link in the same Partition as the given ModelEntity
		/// </summary>
		/// <param name="source">ModelEntity to use as the source of the relationship.</param>
		/// <param name="target">ModelRelation to use as the target of the relationship.</param>
		public EntityHasRelations(ModelEntity source, ModelRelation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasRelations.ModelEntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasRelations.ModelRelationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasRelations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasRelations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasRelations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasRelations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelEntity domain role code
		
		/// <summary>
		/// ModelEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelEntityDomainRoleId = new global::System.Guid(0xf254e672, 0x549c, 0x46a8, 0x86, 0xd2, 0x2f, 0x86, 0xad, 0x16, 0xb3, 0x6f);
		
		/// <summary>
		/// DomainRole ModelEntity
		/// Description for Luminis.Its.Workbench.EntityHasRelations.ModelEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.EntityHasRelations/ModelEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.EntityHasRelations/ModelEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ToRelations", PropertyDisplayNameKey="Luminis.Its.Workbench.EntityHasRelations/ModelEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f254e672-549c-46a8-86d2-2f86ad16b36f")]
		public virtual ModelEntity ModelEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a ModelRelation
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelEntity GetEntity(ModelRelation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelRelationDomainRoleId) as ModelEntity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(ModelRelation element, ModelEntity newModelEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelRelationDomainRoleId, newModelEntity);
		}
		#endregion
		#region ModelRelation domain role code
		
		/// <summary>
		/// ModelRelation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRelationDomainRoleId = new global::System.Guid(0x88c6593d, 0xf0c5, 0x43d1, 0x8b, 0x42, 0x2b, 0xb7, 0x46, 0x0f, 0x6a, 0x09);
		
		/// <summary>
		/// DomainRole ModelRelation
		/// Description for Luminis.Its.Workbench.EntityHasRelations.ModelRelation
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.EntityHasRelations/ModelRelation.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.EntityHasRelations/ModelRelation.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="Luminis.Its.Workbench.EntityHasRelations/ModelRelation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("88c6593d-f0c5-43d1-8b42-2bb7460f6a09")]
		public virtual ModelRelation ModelRelation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRelation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRelationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRelationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ToRelations of a ModelEntity
		/// <summary>
		/// Gets a list of ToRelations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelRelation> GetToRelations(ModelEntity element)
		{
			return new DslModeling::LinkedElementCollection<ModelRelation>(element, ModelEntityDomainRoleId);
		}
		#endregion
		#region ModelEntity link accessor
		/// <summary>
		/// Get the list of EntityHasRelations links to a ModelEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.EntityHasRelations> GetLinksToToRelations ( global::Luminis.Its.Workbench.ModelEntity modelEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.EntityHasRelations>(modelEntityInstance, global::Luminis.Its.Workbench.EntityHasRelations.ModelEntityDomainRoleId);
		}
		#endregion
		#region ModelRelation link accessor
		/// <summary>
		/// Get the EntityHasRelations link to a ModelRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.EntityHasRelations GetLinkToEntity (global::Luminis.Its.Workbench.ModelRelation modelRelationInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.EntityHasRelations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.EntityHasRelations>(modelRelationInstance, global::Luminis.Its.Workbench.EntityHasRelations.ModelRelationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelRelation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasRelations instance accessors
		
		/// <summary>
		/// Get any EntityHasRelations links between a given ModelEntity and a ModelRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.EntityHasRelations> GetLinks( global::Luminis.Its.Workbench.ModelEntity source, global::Luminis.Its.Workbench.ModelRelation target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.EntityHasRelations> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.EntityHasRelations>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.EntityHasRelations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.EntityHasRelations>(source, global::Luminis.Its.Workbench.EntityHasRelations.ModelEntityDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.EntityHasRelations link in links )
			{
				if ( target.Equals(link.ModelRelation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasRelations link between a given ModelEntityand a ModelRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.EntityHasRelations GetLink( global::Luminis.Its.Workbench.ModelEntity source, global::Luminis.Its.Workbench.ModelRelation target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.EntityHasRelations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.EntityHasRelations>(source, global::Luminis.Its.Workbench.EntityHasRelations.ModelEntityDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.EntityHasRelations link in links )
			{
				if ( target.Equals(link.ModelRelation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship RelationHasEntity
	/// Description for Luminis.Its.Workbench.RelationHasEntity
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.RelationHasEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.RelationHasEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e0977312-876a-4959-8d3e-f1597a8114a7")]
	public partial class RelationHasEntity : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RelationHasEntity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe0977312, 0x876a, 0x4959, 0x8d, 0x3e, 0xf1, 0x59, 0x7a, 0x81, 0x14, 0xa7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RelationHasEntity link in the same Partition as the given ModelRelation
		/// </summary>
		/// <param name="source">ModelRelation to use as the source of the relationship.</param>
		/// <param name="target">ModelEntity to use as the target of the relationship.</param>
		public RelationHasEntity(ModelRelation source, ModelEntity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RelationHasEntity.ModelRelationDomainRoleId, source), new DslModeling::RoleAssignment(RelationHasEntity.ModelEntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationHasEntity(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationHasEntity(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationHasEntity(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationHasEntity(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRelation domain role code
		
		/// <summary>
		/// ModelRelation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRelationDomainRoleId = new global::System.Guid(0x820ff246, 0xdf95, 0x4c4c, 0x96, 0xe1, 0xf4, 0xad, 0x9d, 0x22, 0xa5, 0x11);
		
		/// <summary>
		/// DomainRole ModelRelation
		/// Description for Luminis.Its.Workbench.RelationHasEntity.ModelRelation
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.RelationHasEntity/ModelRelation.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.RelationHasEntity/ModelRelation.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelEntity", PropertyDisplayNameKey="Luminis.Its.Workbench.RelationHasEntity/ModelRelation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("820ff246-df95-4c4c-96e1-f4ad9d22a511")]
		public virtual ModelRelation ModelRelation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRelation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRelationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRelationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Relations of a ModelEntity
		/// <summary>
		/// Gets a list of Relations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelRelation> GetRelations(ModelEntity element)
		{
			return new DslModeling::LinkedElementCollection<ModelRelation>(element, ModelEntityDomainRoleId);
		}
		#endregion
		#region ModelEntity domain role code
		
		/// <summary>
		/// ModelEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelEntityDomainRoleId = new global::System.Guid(0x146e69db, 0x731b, 0x461a, 0x88, 0x5d, 0x12, 0xfb, 0x24, 0xee, 0x8d, 0xbe);
		
		/// <summary>
		/// DomainRole ModelEntity
		/// Description for Luminis.Its.Workbench.RelationHasEntity.ModelEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.RelationHasEntity/ModelEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.RelationHasEntity/ModelEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Relations", PropertyDisplayNameKey="Luminis.Its.Workbench.RelationHasEntity/ModelEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("146e69db-731b-461a-885d-12fb24ee8dbe")]
		public virtual ModelEntity ModelEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelEntity of a ModelRelation
		/// <summary>
		/// Gets ModelEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelEntity GetModelEntity(ModelRelation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelRelationDomainRoleId) as ModelEntity;
		}
		
		/// <summary>
		/// Sets ModelEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelEntity(ModelRelation element, ModelEntity newModelEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelRelationDomainRoleId, newModelEntity);
		}
		#endregion
		#region ModelRelation link accessor
		/// <summary>
		/// Get the RelationHasEntity link to a ModelRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.RelationHasEntity GetLinkToModelEntity (global::Luminis.Its.Workbench.ModelRelation modelRelationInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.RelationHasEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.RelationHasEntity>(modelRelationInstance, global::Luminis.Its.Workbench.RelationHasEntity.ModelRelationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelRelation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelEntity link accessor
		/// <summary>
		/// Get the list of RelationHasEntity links to a ModelEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.RelationHasEntity> GetLinksToRelations ( global::Luminis.Its.Workbench.ModelEntity modelEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.RelationHasEntity>(modelEntityInstance, global::Luminis.Its.Workbench.RelationHasEntity.ModelEntityDomainRoleId);
		}
		#endregion
		#region RelationHasEntity instance accessors
		
		/// <summary>
		/// Get any RelationHasEntity links between a given ModelRelation and a ModelEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.RelationHasEntity> GetLinks( global::Luminis.Its.Workbench.ModelRelation source, global::Luminis.Its.Workbench.ModelEntity target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.RelationHasEntity> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.RelationHasEntity>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.RelationHasEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.RelationHasEntity>(source, global::Luminis.Its.Workbench.RelationHasEntity.ModelRelationDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.RelationHasEntity link in links )
			{
				if ( target.Equals(link.ModelEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RelationHasEntity link between a given ModelRelationand a ModelEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.RelationHasEntity GetLink( global::Luminis.Its.Workbench.ModelRelation source, global::Luminis.Its.Workbench.ModelEntity target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.RelationHasEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.RelationHasEntity>(source, global::Luminis.Its.Workbench.RelationHasEntity.ModelRelationDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.RelationHasEntity link in links )
			{
				if ( target.Equals(link.ModelEntity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship ModelTypeReferencesModelComplexTypes
	/// Description for Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e2f683a2-6528-4d4d-8df7-1e6bffbcbc19")]
	public partial class ModelTypeReferencesModelComplexTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTypeReferencesModelComplexTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2f683a2, 0x6528, 0x4d4d, 0x8d, 0xf7, 0x1e, 0x6b, 0xff, 0xbc, 0xbc, 0x19);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTypeReferencesModelComplexTypes link in the same Partition as the given ModelType
		/// </summary>
		/// <param name="source">ModelType to use as the source of the relationship.</param>
		/// <param name="target">ModelComplexType to use as the target of the relationship.</param>
		public ModelTypeReferencesModelComplexTypes(ModelType source, ModelComplexType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTypeReferencesModelComplexTypes.ModelTypeDomainRoleId, source), new DslModeling::RoleAssignment(ModelTypeReferencesModelComplexTypes.ModelComplexTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesModelComplexTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesModelComplexTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTypeReferencesModelComplexTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTypeReferencesModelComplexTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelType domain role code
		
		/// <summary>
		/// ModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTypeDomainRoleId = new global::System.Guid(0x217eb3dd, 0x4a30, 0x41c8, 0x9b, 0x1d, 0x38, 0xf9, 0x1d, 0xed, 0x6a, 0x08);
		
		/// <summary>
		/// DomainRole ModelType
		/// Description for
		/// Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.ModelType
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes/ModelType.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes/ModelType.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelComplexTypes", PropertyDisplayNameKey="Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes/ModelType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("217eb3dd-4a30-41c8-9b1d-38f91ded6a08")]
		public virtual ModelType ModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelTypes of a ModelComplexType
		/// <summary>
		/// Gets a list of ModelTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetModelTypes(ModelComplexType element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, ModelComplexTypeDomainRoleId);
		}
		#endregion
		#region ModelComplexType domain role code
		
		/// <summary>
		/// ModelComplexType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelComplexTypeDomainRoleId = new global::System.Guid(0xfdc66735, 0x2226, 0x44ac, 0x8f, 0x0c, 0x92, 0xd9, 0x93, 0x1b, 0xaa, 0x17);
		
		/// <summary>
		/// DomainRole ModelComplexType
		/// Description for
		/// Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.ModelComplexType
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes/ModelComplexType.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes/ModelComplexType.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelTypes", PropertyDisplayNameKey="Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes/ModelComplexType.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fdc66735-2226-44ac-8f0c-92d9931baa17")]
		public virtual ModelComplexType ModelComplexType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelComplexType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelComplexTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelComplexTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelComplexTypes of a ModelType
		/// <summary>
		/// Gets a list of ModelComplexTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelComplexType> GetModelComplexTypes(ModelType element)
		{
			return new DslModeling::LinkedElementCollection<ModelComplexType>(element, ModelTypeDomainRoleId);
		}
		#endregion
		#region ContainerName domain property code
		
		/// <summary>
		/// ContainerName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ContainerNameDomainPropertyId = new global::System.Guid(0x79cbb3ff, 0x3b8a, 0x415b, 0xb4, 0xb2, 0x47, 0x1f, 0xda, 0x18, 0x24, 0x38);
		
		/// <summary>
		/// Storage for ContainerName
		/// </summary>
		private global::System.String containerNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ContainerName domain property.
		/// Description for
		/// Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.Container Name
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes/ContainerName.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes/ContainerName.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("79cbb3ff-3b8a-415b-b4b2-471fda182438")]
		public global::System.String ContainerName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return containerNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ContainerNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelTypeReferencesModelComplexTypes.ContainerName domain property.
		/// </summary>
		internal sealed partial class ContainerNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelTypeReferencesModelComplexTypes, global::System.String>
		{
			private ContainerNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelTypeReferencesModelComplexTypes.ContainerName domain property value handler.
			/// </summary>
			public static readonly ContainerNamePropertyHandler Instance = new ContainerNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelTypeReferencesModelComplexTypes.ContainerName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ContainerNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelTypeReferencesModelComplexTypes element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.containerNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelTypeReferencesModelComplexTypes element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.containerNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsCollection domain property code
		
		/// <summary>
		/// IsCollection domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsCollectionDomainPropertyId = new global::System.Guid(0x92fcc1ca, 0x2a47, 0x44b7, 0xae, 0x05, 0x2e, 0x59, 0x24, 0xaf, 0x8e, 0xbd);
		
		/// <summary>
		/// Storage for IsCollection
		/// </summary>
		private global::System.Boolean isCollectionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsCollection domain property.
		/// Description for Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.Is
		/// Collection
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes/IsCollection.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes/IsCollection.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("92fcc1ca-2a47-44b7-ae05-2e5924af8ebd")]
		public global::System.Boolean IsCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isCollectionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsCollectionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelTypeReferencesModelComplexTypes.IsCollection domain property.
		/// </summary>
		internal sealed partial class IsCollectionPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelTypeReferencesModelComplexTypes, global::System.Boolean>
		{
			private IsCollectionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelTypeReferencesModelComplexTypes.IsCollection domain property value handler.
			/// </summary>
			public static readonly IsCollectionPropertyHandler Instance = new IsCollectionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelTypeReferencesModelComplexTypes.IsCollection domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsCollectionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelTypeReferencesModelComplexTypes element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isCollectionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelTypeReferencesModelComplexTypes element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isCollectionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelType link accessor
		/// <summary>
		/// Get the list of ModelTypeReferencesModelComplexTypes links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes> GetLinksToModelComplexTypes ( global::Luminis.Its.Workbench.ModelType modelTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes>(modelTypeInstance, global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.ModelTypeDomainRoleId);
		}
		#endregion
		#region ModelComplexType link accessor
		/// <summary>
		/// Get the list of ModelTypeReferencesModelComplexTypes links to a ModelComplexType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes> GetLinksToModelTypes ( global::Luminis.Its.Workbench.ModelComplexType modelComplexTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes>(modelComplexTypeInstance, global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.ModelComplexTypeDomainRoleId);
		}
		#endregion
		#region ModelTypeReferencesModelComplexTypes instance accessors
		
		/// <summary>
		/// Get any ModelTypeReferencesModelComplexTypes links between a given ModelType and a ModelComplexType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes> GetLinks( global::Luminis.Its.Workbench.ModelType source, global::Luminis.Its.Workbench.ModelComplexType target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes>(source, global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.ModelTypeDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes link in links )
			{
				if ( target.Equals(link.ModelComplexType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTypeReferencesModelComplexTypes link between a given ModelTypeand a ModelComplexType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes GetLink( global::Luminis.Its.Workbench.ModelType source, global::Luminis.Its.Workbench.ModelComplexType target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes>(source, global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.ModelTypeDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes link in links )
			{
				if ( target.Equals(link.ModelComplexType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship CaseFileEntityReferencesChildCaseFileRelations
	/// Description for
	/// Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1fa088ba-0cea-4882-9e27-0b1f81cc7b85")]
	public partial class CaseFileEntityReferencesChildCaseFileRelations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CaseFileEntityReferencesChildCaseFileRelations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1fa088ba, 0x0cea, 0x4882, 0x9e, 0x27, 0x0b, 0x1f, 0x81, 0xcc, 0x7b, 0x85);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CaseFileEntityReferencesChildCaseFileRelations link in the same Partition as the given CaseFileEntity
		/// </summary>
		/// <param name="source">CaseFileEntity to use as the source of the relationship.</param>
		/// <param name="target">CaseFileRelation to use as the target of the relationship.</param>
		public CaseFileEntityReferencesChildCaseFileRelations(CaseFileEntity source, CaseFileRelation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CaseFileEntityReferencesChildCaseFileRelations.CaseFileEntityDomainRoleId, source), new DslModeling::RoleAssignment(CaseFileEntityReferencesChildCaseFileRelations.CaseFileRelationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CaseFileEntityReferencesChildCaseFileRelations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CaseFileEntityReferencesChildCaseFileRelations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CaseFileEntityReferencesChildCaseFileRelations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CaseFileEntityReferencesChildCaseFileRelations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CaseFileEntity domain role code
		
		/// <summary>
		/// CaseFileEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid CaseFileEntityDomainRoleId = new global::System.Guid(0xb239e0e0, 0x1b34, 0x4e6d, 0x97, 0xdd, 0xce, 0x15, 0x8c, 0xf0, 0x47, 0x26);
		
		/// <summary>
		/// DomainRole CaseFileEntity
		/// Description for
		/// Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.CaseFileEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations/CaseFileEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations/CaseFileEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildCaseFileRelations", PropertyDisplayNameKey="Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations/CaseFileEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b239e0e0-1b34-4e6d-97dd-ce158cf04726")]
		public virtual CaseFileEntity CaseFileEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CaseFileEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, CaseFileEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CaseFileEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentCaseFileEntity of a CaseFileRelation
		/// <summary>
		/// Gets ParentCaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CaseFileEntity GetParentCaseFileEntity(CaseFileRelation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CaseFileRelationDomainRoleId) as CaseFileEntity;
		}
		
		/// <summary>
		/// Sets ParentCaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentCaseFileEntity(CaseFileRelation element, CaseFileEntity newCaseFileEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CaseFileRelationDomainRoleId, newCaseFileEntity);
		}
		#endregion
		#region CaseFileRelation domain role code
		
		/// <summary>
		/// CaseFileRelation domain role Id.
		/// </summary>
		public static readonly global::System.Guid CaseFileRelationDomainRoleId = new global::System.Guid(0x77810259, 0x2640, 0x4535, 0x95, 0x71, 0xa2, 0x66, 0xa6, 0x2f, 0xce, 0x99);
		
		/// <summary>
		/// DomainRole CaseFileRelation
		/// Description for
		/// Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.CaseFileRelation
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations/CaseFileRelation.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations/CaseFileRelation.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentCaseFileEntity", PropertyDisplayNameKey="Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations/CaseFileRelation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("77810259-2640-4535-9571-a266a62fce99")]
		public virtual CaseFileRelation CaseFileRelation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CaseFileRelation)DslModeling::DomainRoleInfo.GetRolePlayer(this, CaseFileRelationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CaseFileRelationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildCaseFileRelations of a CaseFileEntity
		/// <summary>
		/// Gets a list of ChildCaseFileRelations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CaseFileRelation> GetChildCaseFileRelations(CaseFileEntity element)
		{
			return new DslModeling::LinkedElementCollection<CaseFileRelation>(element, CaseFileEntityDomainRoleId);
		}
		#endregion
		#region CaseFileEntity link accessor
		/// <summary>
		/// Get the list of CaseFileEntityReferencesChildCaseFileRelations links to a CaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations> GetLinksToChildCaseFileRelations ( global::Luminis.Its.Workbench.CaseFileEntity caseFileEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations>(caseFileEntityInstance, global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.CaseFileEntityDomainRoleId);
		}
		#endregion
		#region CaseFileRelation link accessor
		/// <summary>
		/// Get the CaseFileEntityReferencesChildCaseFileRelations link to a CaseFileRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations GetLinkToParentCaseFileEntity (global::Luminis.Its.Workbench.CaseFileRelation caseFileRelationInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations>(caseFileRelationInstance, global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.CaseFileRelationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CaseFileRelation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CaseFileEntityReferencesChildCaseFileRelations instance accessors
		
		/// <summary>
		/// Get any CaseFileEntityReferencesChildCaseFileRelations links between a given CaseFileEntity and a CaseFileRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations> GetLinks( global::Luminis.Its.Workbench.CaseFileEntity source, global::Luminis.Its.Workbench.CaseFileRelation target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations>(source, global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.CaseFileEntityDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations link in links )
			{
				if ( target.Equals(link.CaseFileRelation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CaseFileEntityReferencesChildCaseFileRelations link between a given CaseFileEntityand a CaseFileRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations GetLink( global::Luminis.Its.Workbench.CaseFileEntity source, global::Luminis.Its.Workbench.CaseFileRelation target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations>(source, global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.CaseFileEntityDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations link in links )
			{
				if ( target.Equals(link.CaseFileRelation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship CaseFileRelationReferencesChildCaseFileEntity
	/// Description for
	/// Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cbe91084-489a-4e48-8edb-5b7017612dd1")]
	public partial class CaseFileRelationReferencesChildCaseFileEntity : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CaseFileRelationReferencesChildCaseFileEntity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcbe91084, 0x489a, 0x4e48, 0x8e, 0xdb, 0x5b, 0x70, 0x17, 0x61, 0x2d, 0xd1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CaseFileRelationReferencesChildCaseFileEntity link in the same Partition as the given CaseFileRelation
		/// </summary>
		/// <param name="source">CaseFileRelation to use as the source of the relationship.</param>
		/// <param name="target">CaseFileEntity to use as the target of the relationship.</param>
		public CaseFileRelationReferencesChildCaseFileEntity(CaseFileRelation source, CaseFileEntity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CaseFileRelationReferencesChildCaseFileEntity.CaseFileRelationDomainRoleId, source), new DslModeling::RoleAssignment(CaseFileRelationReferencesChildCaseFileEntity.CaseFileEntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CaseFileRelationReferencesChildCaseFileEntity(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CaseFileRelationReferencesChildCaseFileEntity(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CaseFileRelationReferencesChildCaseFileEntity(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CaseFileRelationReferencesChildCaseFileEntity(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CaseFileRelation domain role code
		
		/// <summary>
		/// CaseFileRelation domain role Id.
		/// </summary>
		public static readonly global::System.Guid CaseFileRelationDomainRoleId = new global::System.Guid(0xb30aee02, 0xa4cb, 0x4032, 0x88, 0xf0, 0x86, 0x81, 0x56, 0x35, 0x3d, 0x73);
		
		/// <summary>
		/// DomainRole CaseFileRelation
		/// Description for
		/// Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileRelation
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity/CaseFileRelation.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity/CaseFileRelation.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildCaseFileEntity", PropertyDisplayNameKey="Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity/CaseFileRelation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b30aee02-a4cb-4032-88f0-868156353d73")]
		public virtual CaseFileRelation CaseFileRelation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CaseFileRelation)DslModeling::DomainRoleInfo.GetRolePlayer(this, CaseFileRelationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CaseFileRelationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentCaseFileRelation of a CaseFileEntity
		/// <summary>
		/// Gets ParentCaseFileRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CaseFileRelation GetParentCaseFileRelation(CaseFileEntity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CaseFileEntityDomainRoleId) as CaseFileRelation;
		}
		
		/// <summary>
		/// Sets ParentCaseFileRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentCaseFileRelation(CaseFileEntity element, CaseFileRelation newCaseFileRelation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CaseFileEntityDomainRoleId, newCaseFileRelation);
		}
		#endregion
		#region CaseFileEntity domain role code
		
		/// <summary>
		/// CaseFileEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid CaseFileEntityDomainRoleId = new global::System.Guid(0x1fb8e86f, 0x2d88, 0x484e, 0xa9, 0xdf, 0x7d, 0x6d, 0x71, 0x36, 0xb6, 0x74);
		
		/// <summary>
		/// DomainRole CaseFileEntity
		/// Description for
		/// Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity/CaseFileEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity/CaseFileEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentCaseFileRelation", PropertyDisplayNameKey="Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity/CaseFileEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1fb8e86f-2d88-484e-a9df-7d6d7136b674")]
		public virtual CaseFileEntity CaseFileEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CaseFileEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, CaseFileEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CaseFileEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildCaseFileEntity of a CaseFileRelation
		/// <summary>
		/// Gets ChildCaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CaseFileEntity GetChildCaseFileEntity(CaseFileRelation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CaseFileRelationDomainRoleId) as CaseFileEntity;
		}
		
		/// <summary>
		/// Sets ChildCaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetChildCaseFileEntity(CaseFileRelation element, CaseFileEntity newCaseFileEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CaseFileRelationDomainRoleId, newCaseFileEntity);
		}
		#endregion
		#region CaseFileRelation link accessor
		/// <summary>
		/// Get the CaseFileRelationReferencesChildCaseFileEntity link to a CaseFileRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity GetLinkToChildCaseFileEntity (global::Luminis.Its.Workbench.CaseFileRelation caseFileRelationInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity>(caseFileRelationInstance, global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileRelationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CaseFileRelation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CaseFileEntity link accessor
		/// <summary>
		/// Get the CaseFileRelationReferencesChildCaseFileEntity link to a CaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity GetLinkToParentCaseFileRelation (global::Luminis.Its.Workbench.CaseFileEntity caseFileEntityInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity>(caseFileEntityInstance, global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileEntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CaseFileEntity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CaseFileRelationReferencesChildCaseFileEntity instance accessors
		
		/// <summary>
		/// Get any CaseFileRelationReferencesChildCaseFileEntity links between a given CaseFileRelation and a CaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity> GetLinks( global::Luminis.Its.Workbench.CaseFileRelation source, global::Luminis.Its.Workbench.CaseFileEntity target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity>(source, global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileRelationDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity link in links )
			{
				if ( target.Equals(link.CaseFileEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CaseFileRelationReferencesChildCaseFileEntity link between a given CaseFileRelationand a CaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity GetLink( global::Luminis.Its.Workbench.CaseFileRelation source, global::Luminis.Its.Workbench.CaseFileEntity target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity>(source, global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileRelationDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity link in links )
			{
				if ( target.Equals(link.CaseFileEntity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship RootCaseFileEntity
	/// Description for Luminis.Its.Workbench.RootCaseFileEntity
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.RootCaseFileEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.RootCaseFileEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e154bce2-7a94-46ee-b82c-8b7d0b00a0e4")]
	public partial class RootCaseFileEntity : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RootCaseFileEntity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe154bce2, 0x7a94, 0x46ee, 0xb8, 0x2c, 0x8b, 0x7d, 0x0b, 0x00, 0xa0, 0xe4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RootCaseFileEntity link in the same Partition as the given CaseFileModelSpec
		/// </summary>
		/// <param name="source">CaseFileModelSpec to use as the source of the relationship.</param>
		/// <param name="target">CaseFileEntity to use as the target of the relationship.</param>
		public RootCaseFileEntity(CaseFileModelSpec source, CaseFileEntity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RootCaseFileEntity.CaseFileModelSpecDomainRoleId, source), new DslModeling::RoleAssignment(RootCaseFileEntity.CaseFileEntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RootCaseFileEntity(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RootCaseFileEntity(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RootCaseFileEntity(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RootCaseFileEntity(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CaseFileModelSpec domain role code
		
		/// <summary>
		/// CaseFileModelSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid CaseFileModelSpecDomainRoleId = new global::System.Guid(0x9e2b4080, 0x67b6, 0x42f7, 0xbe, 0x75, 0x87, 0x16, 0xf5, 0xc3, 0x2f, 0xb3);
		
		/// <summary>
		/// DomainRole CaseFileModelSpec
		/// Description for Luminis.Its.Workbench.RootCaseFileEntity.CaseFileModelSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.RootCaseFileEntity/CaseFileModelSpec.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.RootCaseFileEntity/CaseFileModelSpec.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CaseFileRootEntity", PropertyDisplayNameKey="Luminis.Its.Workbench.RootCaseFileEntity/CaseFileModelSpec.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9e2b4080-67b6-42f7-be75-8716f5c32fb3")]
		public virtual CaseFileModelSpec CaseFileModelSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CaseFileModelSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, CaseFileModelSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CaseFileModelSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CaseFileModelSpecs of a CaseFileEntity
		/// <summary>
		/// Gets a list of CaseFileModelSpecs.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CaseFileModelSpec> GetCaseFileModelSpecs(CaseFileEntity element)
		{
			return new DslModeling::LinkedElementCollection<CaseFileModelSpec>(element, CaseFileEntityDomainRoleId);
		}
		#endregion
		#region CaseFileEntity domain role code
		
		/// <summary>
		/// CaseFileEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid CaseFileEntityDomainRoleId = new global::System.Guid(0x64f32d58, 0xe9a3, 0x4cdd, 0xba, 0x4f, 0x99, 0x6f, 0xb3, 0x87, 0x8d, 0x8e);
		
		/// <summary>
		/// DomainRole CaseFileEntity
		/// Description for Luminis.Its.Workbench.RootCaseFileEntity.CaseFileEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.RootCaseFileEntity/CaseFileEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.RootCaseFileEntity/CaseFileEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CaseFileModelSpecs", PropertyDisplayNameKey="Luminis.Its.Workbench.RootCaseFileEntity/CaseFileEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("64f32d58-e9a3-4cdd-ba4f-996fb3878d8e")]
		public virtual CaseFileEntity CaseFileEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CaseFileEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, CaseFileEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CaseFileEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CaseFileRootEntity of a CaseFileModelSpec
		/// <summary>
		/// Gets CaseFileRootEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CaseFileEntity GetCaseFileRootEntity(CaseFileModelSpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CaseFileModelSpecDomainRoleId) as CaseFileEntity;
		}
		
		/// <summary>
		/// Sets CaseFileRootEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCaseFileRootEntity(CaseFileModelSpec element, CaseFileEntity newCaseFileEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CaseFileModelSpecDomainRoleId, newCaseFileEntity);
		}
		#endregion
		#region CaseFileModelSpec link accessor
		/// <summary>
		/// Get the RootCaseFileEntity link to a CaseFileModelSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.RootCaseFileEntity GetLinkToCaseFileRootEntity (global::Luminis.Its.Workbench.CaseFileModelSpec caseFileModelSpecInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.RootCaseFileEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.RootCaseFileEntity>(caseFileModelSpecInstance, global::Luminis.Its.Workbench.RootCaseFileEntity.CaseFileModelSpecDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CaseFileModelSpec not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CaseFileEntity link accessor
		/// <summary>
		/// Get the list of RootCaseFileEntity links to a CaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.RootCaseFileEntity> GetLinksToCaseFileModelSpecs ( global::Luminis.Its.Workbench.CaseFileEntity caseFileEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.RootCaseFileEntity>(caseFileEntityInstance, global::Luminis.Its.Workbench.RootCaseFileEntity.CaseFileEntityDomainRoleId);
		}
		#endregion
		#region RootCaseFileEntity instance accessors
		
		/// <summary>
		/// Get any RootCaseFileEntity links between a given CaseFileModelSpec and a CaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.RootCaseFileEntity> GetLinks( global::Luminis.Its.Workbench.CaseFileModelSpec source, global::Luminis.Its.Workbench.CaseFileEntity target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.RootCaseFileEntity> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.RootCaseFileEntity>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.RootCaseFileEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.RootCaseFileEntity>(source, global::Luminis.Its.Workbench.RootCaseFileEntity.CaseFileModelSpecDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.RootCaseFileEntity link in links )
			{
				if ( target.Equals(link.CaseFileEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RootCaseFileEntity link between a given CaseFileModelSpecand a CaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.RootCaseFileEntity GetLink( global::Luminis.Its.Workbench.CaseFileModelSpec source, global::Luminis.Its.Workbench.CaseFileEntity target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.RootCaseFileEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.RootCaseFileEntity>(source, global::Luminis.Its.Workbench.RootCaseFileEntity.CaseFileModelSpecDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.RootCaseFileEntity link in links )
			{
				if ( target.Equals(link.CaseFileEntity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship CaseFileEntityReferencesModelEntity
	/// Description for Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f96fbfd4-0f6f-48c1-be57-975c8c6521ad")]
	public partial class CaseFileEntityReferencesModelEntity : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CaseFileEntityReferencesModelEntity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf96fbfd4, 0x0f6f, 0x48c1, 0xbe, 0x57, 0x97, 0x5c, 0x8c, 0x65, 0x21, 0xad);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CaseFileEntityReferencesModelEntity link in the same Partition as the given CaseFileEntity
		/// </summary>
		/// <param name="source">CaseFileEntity to use as the source of the relationship.</param>
		/// <param name="target">ModelEntity to use as the target of the relationship.</param>
		public CaseFileEntityReferencesModelEntity(CaseFileEntity source, ModelEntity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CaseFileEntityReferencesModelEntity.CaseFileEntityDomainRoleId, source), new DslModeling::RoleAssignment(CaseFileEntityReferencesModelEntity.ModelEntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CaseFileEntityReferencesModelEntity(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CaseFileEntityReferencesModelEntity(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CaseFileEntityReferencesModelEntity(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CaseFileEntityReferencesModelEntity(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CaseFileEntity domain role code
		
		/// <summary>
		/// CaseFileEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid CaseFileEntityDomainRoleId = new global::System.Guid(0xee9311cb, 0xa14b, 0x4f71, 0xa4, 0xc6, 0xce, 0x1e, 0x02, 0x57, 0x06, 0xed);
		
		/// <summary>
		/// DomainRole CaseFileEntity
		/// Description for
		/// Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.CaseFileEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity/CaseFileEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity/CaseFileEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelEntity", PropertyDisplayNameKey="Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity/CaseFileEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ee9311cb-a14b-4f71-a4c6-ce1e025706ed")]
		public virtual CaseFileEntity CaseFileEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CaseFileEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, CaseFileEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CaseFileEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CaseFileEntities of a ModelEntity
		/// <summary>
		/// Gets a list of CaseFileEntities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CaseFileEntity> GetCaseFileEntities(ModelEntity element)
		{
			return new DslModeling::LinkedElementCollection<CaseFileEntity>(element, ModelEntityDomainRoleId);
		}
		#endregion
		#region ModelEntity domain role code
		
		/// <summary>
		/// ModelEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelEntityDomainRoleId = new global::System.Guid(0x5069f59a, 0x5c87, 0x4c9c, 0xa8, 0xc5, 0x04, 0xc5, 0x19, 0x0a, 0x6b, 0x44);
		
		/// <summary>
		/// DomainRole ModelEntity
		/// Description for
		/// Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.ModelEntity
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity/ModelEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity/ModelEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CaseFileEntities", PropertyDisplayNameKey="Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity/ModelEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5069f59a-5c87-4c9c-a8c5-04c5190a6b44")]
		public virtual ModelEntity ModelEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelEntity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelEntity of a CaseFileEntity
		/// <summary>
		/// Gets ModelEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelEntity GetModelEntity(CaseFileEntity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CaseFileEntityDomainRoleId) as ModelEntity;
		}
		
		/// <summary>
		/// Sets ModelEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelEntity(CaseFileEntity element, ModelEntity newModelEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CaseFileEntityDomainRoleId, newModelEntity);
		}
		#endregion
		#region CaseFileEntity link accessor
		/// <summary>
		/// Get the CaseFileEntityReferencesModelEntity link to a CaseFileEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity GetLinkToModelEntity (global::Luminis.Its.Workbench.CaseFileEntity caseFileEntityInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity>(caseFileEntityInstance, global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.CaseFileEntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CaseFileEntity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelEntity link accessor
		/// <summary>
		/// Get the list of CaseFileEntityReferencesModelEntity links to a ModelEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity> GetLinksToCaseFileEntities ( global::Luminis.Its.Workbench.ModelEntity modelEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity>(modelEntityInstance, global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.ModelEntityDomainRoleId);
		}
		#endregion
		#region CaseFileEntityReferencesModelEntity instance accessors
		
		/// <summary>
		/// Get any CaseFileEntityReferencesModelEntity links between a given CaseFileEntity and a ModelEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity> GetLinks( global::Luminis.Its.Workbench.CaseFileEntity source, global::Luminis.Its.Workbench.ModelEntity target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity>(source, global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.CaseFileEntityDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity link in links )
			{
				if ( target.Equals(link.ModelEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CaseFileEntityReferencesModelEntity link between a given CaseFileEntityand a ModelEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity GetLink( global::Luminis.Its.Workbench.CaseFileEntity source, global::Luminis.Its.Workbench.ModelEntity target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity>(source, global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.CaseFileEntityDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity link in links )
			{
				if ( target.Equals(link.ModelEntity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainRelationship CaseFileRelationReferencesModelRelation
	/// Description for Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0b03db2e-eb8e-4bbc-807f-4804d9ca4a40")]
	public partial class CaseFileRelationReferencesModelRelation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CaseFileRelationReferencesModelRelation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b03db2e, 0xeb8e, 0x4bbc, 0x80, 0x7f, 0x48, 0x04, 0xd9, 0xca, 0x4a, 0x40);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CaseFileRelationReferencesModelRelation link in the same Partition as the given CaseFileRelation
		/// </summary>
		/// <param name="source">CaseFileRelation to use as the source of the relationship.</param>
		/// <param name="target">ModelRelation to use as the target of the relationship.</param>
		public CaseFileRelationReferencesModelRelation(CaseFileRelation source, ModelRelation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CaseFileRelationReferencesModelRelation.CaseFileRelationDomainRoleId, source), new DslModeling::RoleAssignment(CaseFileRelationReferencesModelRelation.ModelRelationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CaseFileRelationReferencesModelRelation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CaseFileRelationReferencesModelRelation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CaseFileRelationReferencesModelRelation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CaseFileRelationReferencesModelRelation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CaseFileRelation domain role code
		
		/// <summary>
		/// CaseFileRelation domain role Id.
		/// </summary>
		public static readonly global::System.Guid CaseFileRelationDomainRoleId = new global::System.Guid(0x5ce92069, 0xf720, 0x4794, 0xbb, 0x75, 0xdd, 0x56, 0x42, 0xb0, 0x58, 0x80);
		
		/// <summary>
		/// DomainRole CaseFileRelation
		/// Description for
		/// Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.CaseFileRelation
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation/CaseFileRelation.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation/CaseFileRelation.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelRelation", PropertyDisplayNameKey="Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation/CaseFileRelation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5ce92069-f720-4794-bb75-dd5642b05880")]
		public virtual CaseFileRelation CaseFileRelation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CaseFileRelation)DslModeling::DomainRoleInfo.GetRolePlayer(this, CaseFileRelationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CaseFileRelationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CaseFileRelations of a ModelRelation
		/// <summary>
		/// Gets a list of CaseFileRelations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CaseFileRelation> GetCaseFileRelations(ModelRelation element)
		{
			return new DslModeling::LinkedElementCollection<CaseFileRelation>(element, ModelRelationDomainRoleId);
		}
		#endregion
		#region ModelRelation domain role code
		
		/// <summary>
		/// ModelRelation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRelationDomainRoleId = new global::System.Guid(0xee724914, 0xabe1, 0x4c52, 0xac, 0xac, 0xbc, 0xa4, 0x00, 0x95, 0x65, 0x57);
		
		/// <summary>
		/// DomainRole ModelRelation
		/// Description for
		/// Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.ModelRelation
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation/ModelRelation.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation/ModelRelation.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CaseFileRelations", PropertyDisplayNameKey="Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation/ModelRelation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ee724914-abe1-4c52-acac-bca400956557")]
		public virtual ModelRelation ModelRelation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRelation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRelationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRelationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRelation of a CaseFileRelation
		/// <summary>
		/// Gets ModelRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRelation GetModelRelation(CaseFileRelation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CaseFileRelationDomainRoleId) as ModelRelation;
		}
		
		/// <summary>
		/// Sets ModelRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRelation(CaseFileRelation element, ModelRelation newModelRelation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CaseFileRelationDomainRoleId, newModelRelation);
		}
		#endregion
		#region CaseFileRelation link accessor
		/// <summary>
		/// Get the CaseFileRelationReferencesModelRelation link to a CaseFileRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation GetLinkToModelRelation (global::Luminis.Its.Workbench.CaseFileRelation caseFileRelationInstance)
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation>(caseFileRelationInstance, global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.CaseFileRelationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CaseFileRelation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRelation link accessor
		/// <summary>
		/// Get the list of CaseFileRelationReferencesModelRelation links to a ModelRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation> GetLinksToCaseFileRelations ( global::Luminis.Its.Workbench.ModelRelation modelRelationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation>(modelRelationInstance, global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.ModelRelationDomainRoleId);
		}
		#endregion
		#region CaseFileRelationReferencesModelRelation instance accessors
		
		/// <summary>
		/// Get any CaseFileRelationReferencesModelRelation links between a given CaseFileRelation and a ModelRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation> GetLinks( global::Luminis.Its.Workbench.CaseFileRelation source, global::Luminis.Its.Workbench.ModelRelation target )
		{
			global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation> outLinks = new global::System.Collections.Generic.List<global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation>();
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation>(source, global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.CaseFileRelationDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation link in links )
			{
				if ( target.Equals(link.ModelRelation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CaseFileRelationReferencesModelRelation link between a given CaseFileRelationand a ModelRelation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation GetLink( global::Luminis.Its.Workbench.CaseFileRelation source, global::Luminis.Its.Workbench.ModelRelation target )
		{
			global::System.Collections.Generic.IList<global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation>(source, global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.CaseFileRelationDomainRoleId);
			foreach ( global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation link in links )
			{
				if ( target.Equals(link.ModelRelation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
