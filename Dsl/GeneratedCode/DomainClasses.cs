//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.NamedElement.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.NamedElement.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("0ea4c852-dd0b-4c9a-8707-76724082a360")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0ea4c852, 0xdd0b, 0x4c9a, 0x87, 0x07, 0x76, 0x72, 0x40, 0x82, 0xa3, 0x60);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x6d98f9d1, 0x3384, 0x423d, 0xb7, 0x18, 0x71, 0x27, 0xda, 0x4e, 0xc4, 0x70);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.NamedElement/Name.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.NamedElement/Name.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("6d98f9d1-3384-423d-b718-7127da4ec470")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass ModelRoot
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelRoot.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelRoot.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("01702fe4-aa67-4799-8b5a-e8fc6e79d106")]
	public partial class ModelRoot : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x01702fe4, 0xaa67, 0x4799, 0x8b, 0x5a, 0xe8, 0xfc, 0x6e, 0x79, 0xd1, 0x06);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Comment>(this, global::Luminis.Its.Workbench.ModelRootHasComments.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region ObjectModelSpec opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectModelSpec.
		/// Description for Luminis.Its.Workbench.HasObjectModelSpec.ModelRoot
		/// </summary>
		public virtual ObjectModelSpec ObjectModelSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.HasObjectModelSpec.ModelRootDomainRoleId) as ObjectModelSpec;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.HasObjectModelSpec.ModelRootDomainRoleId, value);
			}
		}
		#endregion
		#region CaseFileModelSpecs opposite domain role accessor
		/// <summary>
		/// Gets a list of CaseFileModelSpecs.
		/// Description for Luminis.Its.Workbench.HasCaseFileModelSpec.ModelRoot
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CaseFileModelSpec> CaseFileModelSpecs
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<CaseFileModelSpec>(this, global::Luminis.Its.Workbench.HasCaseFileModelSpec.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Luminis.Its.Workbench.CaseFileModelSpec.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Luminis.Its.Workbench.ObjectModelSpec.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: HasObjectModelSpec.ObjectModelSpec
					if (this.ObjectModelSpec != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Luminis.Its.Workbench.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Luminis.Its.Workbench.CaseFileModelSpec sourceCaseFileModelSpec1 = sourceElement as global::Luminis.Its.Workbench.CaseFileModelSpec;
			if (sourceCaseFileModelSpec1 != null)
			{
				// Create link for path HasCaseFileModelSpec.CaseFileModelSpecs
				this.CaseFileModelSpecs.Add(sourceCaseFileModelSpec1);

				return;
			}
				
			global::Luminis.Its.Workbench.ObjectModelSpec sourceObjectModelSpec2 = sourceElement as global::Luminis.Its.Workbench.ObjectModelSpec;
			if (sourceObjectModelSpec2 != null)
			{
				// Create link for path HasObjectModelSpec.ObjectModelSpec
				this.ObjectModelSpec = sourceObjectModelSpec2;

				return;
			}
				
			global::Luminis.Its.Workbench.Comment sourceComment3 = sourceElement as global::Luminis.Its.Workbench.Comment;
			if (sourceComment3 != null)
			{
				// Create link for path ModelRootHasComments.Comments
				this.Comments.Add(sourceComment3);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Luminis.Its.Workbench.CaseFileModelSpec sourceCaseFileModelSpec1 = sourceElement as global::Luminis.Its.Workbench.CaseFileModelSpec;
			if (sourceCaseFileModelSpec1 != null)
			{
				// Delete link for path HasCaseFileModelSpec.CaseFileModelSpecs
				
				foreach (DslModeling::ElementLink link in global::Luminis.Its.Workbench.HasCaseFileModelSpec.GetLinks((global::Luminis.Its.Workbench.ModelRoot)this, sourceCaseFileModelSpec1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Luminis.Its.Workbench.HasCaseFileModelSpec.ModelRootDomainRoleId, global::Luminis.Its.Workbench.HasCaseFileModelSpec.CaseFileModelSpecDomainRoleId);
				}

				return;
			}
				
			global::Luminis.Its.Workbench.ObjectModelSpec sourceObjectModelSpec2 = sourceElement as global::Luminis.Its.Workbench.ObjectModelSpec;
			if (sourceObjectModelSpec2 != null)
			{
				// Delete link for path HasObjectModelSpec.ObjectModelSpec
				
				foreach (DslModeling::ElementLink link in global::Luminis.Its.Workbench.HasObjectModelSpec.GetLinks((global::Luminis.Its.Workbench.ModelRoot)this, sourceObjectModelSpec2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Luminis.Its.Workbench.HasObjectModelSpec.ModelRootDomainRoleId, global::Luminis.Its.Workbench.HasObjectModelSpec.ObjectModelSpecDomainRoleId);
				}

				return;
			}
				
			global::Luminis.Its.Workbench.Comment sourceComment3 = sourceElement as global::Luminis.Its.Workbench.Comment;
			if (sourceComment3 != null)
			{
				// Delete link for path ModelRootHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::Luminis.Its.Workbench.ModelRootHasComments.GetLinks((global::Luminis.Its.Workbench.ModelRoot)this, sourceComment3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Luminis.Its.Workbench.ModelRootHasComments.ModelRootDomainRoleId, global::Luminis.Its.Workbench.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass ModelAttribute
	/// An attribute of a class.
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelAttribute.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelAttribute.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("65ad2849-6f91-4739-adba-28d37b6b2af2")]
	public partial class ModelAttribute : ObjectModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x65ad2849, 0x6f91, 0x4739, 0xad, 0xba, 0x28, 0xd3, 0x7b, 0x6b, 0x2a, 0xf2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x6e32f884, 0xa0cc, 0x4381, 0x90, 0xa7, 0x1d, 0xc6, 0x56, 0xc6, 0x5a, 0xee);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelAttribute/Type.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelAttribute/Type.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("6e32f884-a0cc-4381-90a7-1dc656c65aee")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InitialValue domain property code
		
		/// <summary>
		/// InitialValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid InitialValueDomainPropertyId = new global::System.Guid(0xd827311b, 0xd9d7, 0x412f, 0x81, 0x70, 0x85, 0x9c, 0xe9, 0x90, 0xbd, 0x1a);
		
		/// <summary>
		/// Storage for InitialValue
		/// </summary>
		private global::System.String initialValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InitialValue domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelAttribute/InitialValue.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelAttribute/InitialValue.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("d827311b-d9d7-412f-8170-859ce990bd1a")]
		public global::System.String InitialValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return initialValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InitialValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.InitialValue domain property.
		/// </summary>
		internal sealed partial class InitialValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private InitialValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.InitialValue domain property value handler.
			/// </summary>
			public static readonly InitialValuePropertyHandler Instance = new InitialValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.InitialValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InitialValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.initialValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.initialValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Required domain property code
		
		/// <summary>
		/// Required domain property Id.
		/// </summary>
		public static readonly global::System.Guid RequiredDomainPropertyId = new global::System.Guid(0xde3310e7, 0x28d2, 0x4e95, 0xb7, 0xfe, 0xc2, 0xff, 0xd3, 0xe2, 0xf6, 0xd6);
		
		/// <summary>
		/// Storage for Required
		/// </summary>
		private global::System.Boolean requiredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Required domain property.
		/// Description for Luminis.Its.Workbench.ModelAttribute.Required
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelAttribute/Required.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelAttribute/Required.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("de3310e7-28d2-4e95-b7fe-c2ffd3e2f6d6")]
		public global::System.Boolean Required
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return requiredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RequiredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Required domain property.
		/// </summary>
		internal sealed partial class RequiredPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private RequiredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Required domain property value handler.
			/// </summary>
			public static readonly RequiredPropertyHandler Instance = new RequiredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Required domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RequiredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.requiredPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.requiredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelType opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelType.
		/// Description for Luminis.Its.Workbench.ModelTypeHasAttributes.ModelAttribute
		/// </summary>
		public virtual ModelType ModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.ModelTypeHasAttributes.ModelAttributeDomainRoleId) as ModelType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.ModelTypeHasAttributes.ModelAttributeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass Comment
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.Comment.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.Comment.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ec0ef121-6162-408f-8ab3-69aa325c49f3")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xec0ef121, 0x6162, 0x408f, 0x8a, 0xb3, 0x69, 0xaa, 0x32, 0x5c, 0x49, 0xf3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xa5798a13, 0xc0b4, 0x42e6, 0x94, 0x17, 0x9e, 0xc1, 0x24, 0x0e, 0xf5, 0xcc);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.Comment/Text.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.Comment/Text.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("a5798a13-c0b4-42e6-9417-9ec1240ef5cc")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.ModelRootHasComments.CommentDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.ModelRootHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelType>(this, global::Luminis.Its.Workbench.CommentReferencesSubjects.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass ModelType
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelType.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelType.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1fd46933-711c-47ae-bde4-b098b508e583")]
	public abstract partial class ModelType : ObjectModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1fd46933, 0x711c, 0x47ae, 0xbd, 0xe4, 0xb0, 0x98, 0xb5, 0x08, 0xe5, 0x83);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Comment>(this, global::Luminis.Its.Workbench.CommentReferencesSubjects.SubjectDomainRoleId);
			}
		}
		#endregion
		#region ObjectModelSpec opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectModelSpec.
		/// Description for Luminis.Its.Workbench.ObjectModelSpecHasTypes.ModelType
		/// </summary>
		public virtual ObjectModelSpec ObjectModelSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.ModelTypeDomainRoleId) as ObjectModelSpec;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.ModelTypeDomainRoleId, value);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for Luminis.Its.Workbench.ModelTypeHasAttributes.ModelType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelAttribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelAttribute>(this, global::Luminis.Its.Workbench.ModelTypeHasAttributes.ModelTypeDomainRoleId);
			}
		}
		#endregion
		#region ModelComplexTypes opposite domain role accessor
		/// <summary>
		/// Gets a list of ModelComplexTypes.
		/// Description for
		/// Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.ModelType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelComplexType> ModelComplexTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelComplexType>(this, global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.ModelTypeDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Luminis.Its.Workbench.ModelAttribute.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Luminis.Its.Workbench.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Luminis.Its.Workbench.ModelAttribute sourceModelAttribute1 = sourceElement as global::Luminis.Its.Workbench.ModelAttribute;
			if (sourceModelAttribute1 != null)
			{
				// Create link for path ModelTypeHasAttributes.Attributes
				this.Attributes.Add(sourceModelAttribute1);

				return;
			}
				
			global::Luminis.Its.Workbench.Comment sourceComment2 = sourceElement as global::Luminis.Its.Workbench.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path CommentReferencesSubjects.Comments
				this.Comments.Add(sourceComment2);

				// Create link for path ObjectModelSpecHasTypes.ObjectModelSpec/!ObjectModelSpec/HasObjectModelSpec.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
						// Segments 0 and 1
						global::Luminis.Its.Workbench.ObjectModelSpec this2 = this.ObjectModelSpec;
						if ( this2 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ObjectModelSpecHasTypes.ObjectModelSpec/!ObjectModelSpec/HasObjectModelSpec.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
						// Segments 2 and 3
						global::Luminis.Its.Workbench.ModelRoot commentHost1 = this2.ModelRoot;
						if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ObjectModelSpecHasTypes.ObjectModelSpec/!ObjectModelSpec/HasObjectModelSpec.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				commentHost1.Comments.Add(sourceComment2);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Luminis.Its.Workbench.ModelAttribute sourceModelAttribute1 = sourceElement as global::Luminis.Its.Workbench.ModelAttribute;
			if (sourceModelAttribute1 != null)
			{
				// Delete link for path ModelTypeHasAttributes.Attributes
				
				foreach (DslModeling::ElementLink link in global::Luminis.Its.Workbench.ModelTypeHasAttributes.GetLinks((global::Luminis.Its.Workbench.ModelType)this, sourceModelAttribute1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Luminis.Its.Workbench.ModelTypeHasAttributes.ModelTypeDomainRoleId, global::Luminis.Its.Workbench.ModelTypeHasAttributes.ModelAttributeDomainRoleId);
				}

				return;
			}
				
			global::Luminis.Its.Workbench.Comment sourceComment2 = sourceElement as global::Luminis.Its.Workbench.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path CommentReferencesSubjects.Comments
				
				foreach (DslModeling::ElementLink link in global::Luminis.Its.Workbench.CommentReferencesSubjects.GetLinks(sourceComment2, (global::Luminis.Its.Workbench.ModelType)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Luminis.Its.Workbench.CommentReferencesSubjects.SubjectDomainRoleId, global::Luminis.Its.Workbench.CommentReferencesSubjects.CommentDomainRoleId);
				}

				// Delete link for path ObjectModelSpecHasTypes.ObjectModelSpec/!ObjectModelSpec/HasObjectModelSpec.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
					// Segments 0 and 1
					global::Luminis.Its.Workbench.ObjectModelSpec this2 = this.ObjectModelSpec;
					if ( this2 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ObjectModelSpecHasTypes.ObjectModelSpec/!ObjectModelSpec/HasObjectModelSpec.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
					// Segments 2 and 3
					global::Luminis.Its.Workbench.ModelRoot commentHost1 = this2.ModelRoot;
					if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ObjectModelSpecHasTypes.ObjectModelSpec/!ObjectModelSpec/HasObjectModelSpec.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::Luminis.Its.Workbench.ModelRootHasComments.GetLinks((global::Luminis.Its.Workbench.ModelRoot)commentHost1, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Luminis.Its.Workbench.ModelRootHasComments.ModelRootDomainRoleId, global::Luminis.Its.Workbench.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass ObjectModelElement
	/// Element with a Description
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ObjectModelElement.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ObjectModelElement.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d54639a7-5344-4749-8ec2-a7f9c69f00c1")]
	public abstract partial class ObjectModelElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd54639a7, 0x5344, 0x4749, 0x8e, 0xc2, 0xa7, 0xf9, 0xc6, 0x9f, 0x00, 0xc1);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ObjectModelElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x23f51d5c, 0x62e4, 0x4521, 0xbc, 0x07, 0x49, 0x03, 0x9c, 0x4c, 0x94, 0xd8);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// This is a Description.
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ObjectModelElement/Description.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ObjectModelElement/Description.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("23f51d5c-62e4-4521-bc07-49039c4c94d8")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectModelElement.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectModelElement, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectModelElement.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectModelElement.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectModelElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectModelElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass ObjectModelSpec
	/// Description for Luminis.Its.Workbench.ObjectModelSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ObjectModelSpec.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ObjectModelSpec.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("eee95722-bbba-4040-b8d3-96c4b76a9d9e")]
	public partial class ObjectModelSpec : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectModelSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeee95722, 0xbbba, 0x4040, 0xb8, 0xd3, 0x96, 0xc4, 0xb7, 0x6a, 0x9d, 0x9e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectModelSpec(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ObjectModelSpec(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Self domain property code
		
		/// <summary>
		/// Self domain property Id.
		/// </summary>
		public static readonly global::System.Guid SelfDomainPropertyId = new global::System.Guid(0x5f8af9cc, 0x9fe2, 0x4c36, 0xac, 0x5f, 0x5d, 0xa5, 0xf9, 0xe9, 0x65, 0x74);
		
		/// <summary>
		/// Storage for Self
		/// </summary>
		private global::System.String selfPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Self domain property.
		/// Description for Luminis.Its.Workbench.ObjectModelSpec.Self
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ObjectModelSpec/Self.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.ObjectModelSpec/Self.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("5f8af9cc-9fe2-4c36-ac5f-5da5f9e96574")]
		public global::System.String Self
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return selfPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SelfPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectModelSpec.Self domain property.
		/// </summary>
		internal sealed partial class SelfPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectModelSpec, global::System.String>
		{
			private SelfPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectModelSpec.Self domain property value handler.
			/// </summary>
			public static readonly SelfPropertyHandler Instance = new SelfPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectModelSpec.Self domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SelfDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectModelSpec element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.selfPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectModelSpec element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.selfPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// Description for Luminis.Its.Workbench.HasObjectModelSpec.ObjectModelSpec
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.HasObjectModelSpec.ObjectModelSpecDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.HasObjectModelSpec.ObjectModelSpecDomainRoleId, value);
			}
		}
		#endregion
		#region Types opposite domain role accessor
		/// <summary>
		/// Gets a list of Types.
		/// Description for Luminis.Its.Workbench.ObjectModelSpecHasTypes.ObjectModelSpec
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelType>(this, global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.ObjectModelSpecDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Luminis.Its.Workbench.ModelType.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Luminis.Its.Workbench.ModelType sourceModelType1 = sourceElement as global::Luminis.Its.Workbench.ModelType;
			if (sourceModelType1 != null)
			{
				// Create link for path ObjectModelSpecHasTypes.Types
				this.Types.Add(sourceModelType1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Luminis.Its.Workbench.ModelType sourceModelType1 = sourceElement as global::Luminis.Its.Workbench.ModelType;
			if (sourceModelType1 != null)
			{
				// Delete link for path ObjectModelSpecHasTypes.Types
				
				foreach (DslModeling::ElementLink link in global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.GetLinks((global::Luminis.Its.Workbench.ObjectModelSpec)this, sourceModelType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.ObjectModelSpecDomainRoleId, global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.ModelTypeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass CaseFileModelSpec
	/// Description for Luminis.Its.Workbench.CaseFileModelSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileModelSpec.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileModelSpec.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("962ac54d-2708-48a1-8686-fe18b688f545")]
	public partial class CaseFileModelSpec : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CaseFileModelSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x962ac54d, 0x2708, 0x48a1, 0x86, 0x86, 0xfe, 0x18, 0xb6, 0x88, 0xf5, 0x45);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CaseFileModelSpec(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CaseFileModelSpec(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region UriTemplate domain property code
		
		/// <summary>
		/// UriTemplate domain property Id.
		/// </summary>
		public static readonly global::System.Guid UriTemplateDomainPropertyId = new global::System.Guid(0x1e39d0c4, 0x660d, 0x43e0, 0x88, 0x10, 0x85, 0x28, 0xee, 0xa4, 0x72, 0x9b);
		
		/// <summary>
		/// Storage for UriTemplate
		/// </summary>
		private global::System.String uriTemplatePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of UriTemplate domain property.
		/// Description for Luminis.Its.Workbench.CaseFileModelSpec.Uri Template
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileModelSpec/UriTemplate.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileModelSpec/UriTemplate.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1e39d0c4-660d-43e0-8810-8528eea4729b")]
		public global::System.String UriTemplate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return uriTemplatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UriTemplatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CaseFileModelSpec.UriTemplate domain property.
		/// </summary>
		internal sealed partial class UriTemplatePropertyHandler : DslModeling::DomainPropertyValueHandler<CaseFileModelSpec, global::System.String>
		{
			private UriTemplatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CaseFileModelSpec.UriTemplate domain property value handler.
			/// </summary>
			public static readonly UriTemplatePropertyHandler Instance = new UriTemplatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CaseFileModelSpec.UriTemplate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UriTemplateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CaseFileModelSpec element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.uriTemplatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CaseFileModelSpec element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.uriTemplatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Self domain property code
		
		/// <summary>
		/// Self domain property Id.
		/// </summary>
		public static readonly global::System.Guid SelfDomainPropertyId = new global::System.Guid(0x7a979ff7, 0x7a43, 0x465b, 0xaf, 0xdc, 0x1a, 0xd5, 0xd2, 0x91, 0x16, 0x2b);
		
		/// <summary>
		/// Storage for Self
		/// </summary>
		private global::System.String selfPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Self domain property.
		/// Description for Luminis.Its.Workbench.CaseFileModelSpec.Self
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileModelSpec/Self.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileModelSpec/Self.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("7a979ff7-7a43-465b-afdc-1ad5d291162b")]
		public global::System.String Self
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return selfPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SelfPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CaseFileModelSpec.Self domain property.
		/// </summary>
		internal sealed partial class SelfPropertyHandler : DslModeling::DomainPropertyValueHandler<CaseFileModelSpec, global::System.String>
		{
			private SelfPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CaseFileModelSpec.Self domain property value handler.
			/// </summary>
			public static readonly SelfPropertyHandler Instance = new SelfPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CaseFileModelSpec.Self domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SelfDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CaseFileModelSpec element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.selfPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CaseFileModelSpec element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.selfPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ObjectModelSpec domain property code
		
		/// <summary>
		/// ObjectModelSpec domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObjectModelSpecDomainPropertyId = new global::System.Guid(0x656bf97b, 0xbc88, 0x44b3, 0xab, 0xa5, 0xb6, 0x8e, 0xde, 0x9f, 0xe4, 0xb1);
		
		/// <summary>
		/// Storage for ObjectModelSpec
		/// </summary>
		private global::System.String objectModelSpecPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ObjectModelSpec domain property.
		/// Description for Luminis.Its.Workbench.CaseFileModelSpec.Object Model Spec
		/// </summary>
		[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileModelSpec/ObjectModelSpec.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileModelSpec/ObjectModelSpec.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("656bf97b-bc88-44b3-aba5-b68ede9fe4b1")]
		public global::System.String ObjectModelSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return objectModelSpecPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObjectModelSpecPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CaseFileModelSpec.ObjectModelSpec domain property.
		/// </summary>
		internal sealed partial class ObjectModelSpecPropertyHandler : DslModeling::DomainPropertyValueHandler<CaseFileModelSpec, global::System.String>
		{
			private ObjectModelSpecPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CaseFileModelSpec.ObjectModelSpec domain property value handler.
			/// </summary>
			public static readonly ObjectModelSpecPropertyHandler Instance = new ObjectModelSpecPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CaseFileModelSpec.ObjectModelSpec domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObjectModelSpecDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CaseFileModelSpec element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.objectModelSpecPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CaseFileModelSpec element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.objectModelSpecPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// Description for Luminis.Its.Workbench.HasCaseFileModelSpec.CaseFileModelSpec
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.HasCaseFileModelSpec.CaseFileModelSpecDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.HasCaseFileModelSpec.CaseFileModelSpecDomainRoleId, value);
			}
		}
		#endregion
		#region CaseFileTypes opposite domain role accessor
		/// <summary>
		/// Gets a list of CaseFileTypes.
		/// Description for
		/// Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileModelSpec
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CaseFileType> CaseFileTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<CaseFileType>(this, global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileModelSpecDomainRoleId);
			}
		}
		#endregion
		#region CaseFileRootEntity opposite domain role accessor
		/// <summary>
		/// Gets or sets CaseFileRootEntity.
		/// Description for Luminis.Its.Workbench.RootCaseFileEntity.CaseFileModelSpec
		/// </summary>
		public virtual CaseFileEntity CaseFileRootEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.RootCaseFileEntity.CaseFileModelSpecDomainRoleId) as CaseFileEntity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.RootCaseFileEntity.CaseFileModelSpecDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Luminis.Its.Workbench.CaseFileType.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Luminis.Its.Workbench.CaseFileType sourceCaseFileType1 = sourceElement as global::Luminis.Its.Workbench.CaseFileType;
			if (sourceCaseFileType1 != null)
			{
				// Create link for path CaseFileModelSpecHasCaseFileTypes.CaseFileTypes
				this.CaseFileTypes.Add(sourceCaseFileType1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Luminis.Its.Workbench.CaseFileType sourceCaseFileType1 = sourceElement as global::Luminis.Its.Workbench.CaseFileType;
			if (sourceCaseFileType1 != null)
			{
				// Delete link for path CaseFileModelSpecHasCaseFileTypes.CaseFileTypes
				
				foreach (DslModeling::ElementLink link in global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.GetLinks((global::Luminis.Its.Workbench.CaseFileModelSpec)this, sourceCaseFileType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileModelSpecDomainRoleId, global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileTypeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass CaseFileType
	/// Description for Luminis.Its.Workbench.CaseFileType
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileType.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileType.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8851c9ec-eb94-4286-8839-b50f3a14898d")]
	public abstract partial class CaseFileType : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CaseFileType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8851c9ec, 0xeb94, 0x4286, 0x88, 0x39, 0xb5, 0x0f, 0x3a, 0x14, 0x89, 0x8d);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CaseFileType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CaseFileModelSpec opposite domain role accessor
		/// <summary>
		/// Gets or sets CaseFileModelSpec.
		/// Description for
		/// Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileType
		/// </summary>
		public virtual CaseFileModelSpec CaseFileModelSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileTypeDomainRoleId) as CaseFileModelSpec;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileTypeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass CaseFileEntity
	/// Description for Luminis.Its.Workbench.CaseFileEntity
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9dc988ac-2e68-4fe4-aa6e-bac1071d34bb")]
	public partial class CaseFileEntity : CaseFileType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CaseFileEntity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9dc988ac, 0x2e68, 0x4fe4, 0xaa, 0x6e, 0xba, 0xc1, 0x07, 0x1d, 0x34, 0xbb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CaseFileEntity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CaseFileEntity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ChildCaseFileRelations opposite domain role accessor
		/// <summary>
		/// Gets a list of ChildCaseFileRelations.
		/// Description for
		/// Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.CaseFileEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CaseFileRelation> ChildCaseFileRelations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<CaseFileRelation>(this, global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.CaseFileEntityDomainRoleId);
			}
		}
		#endregion
		#region ParentCaseFileRelation opposite domain role accessor
		/// <summary>
		/// Gets or sets ParentCaseFileRelation.
		/// Description for
		/// Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileEntity
		/// </summary>
		public virtual CaseFileRelation ParentCaseFileRelation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileEntityDomainRoleId) as CaseFileRelation;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileEntityDomainRoleId, value);
			}
		}
		#endregion
		#region CaseFileModelSpecs opposite domain role accessor
		/// <summary>
		/// Gets a list of CaseFileModelSpecs.
		/// Description for Luminis.Its.Workbench.RootCaseFileEntity.CaseFileEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CaseFileModelSpec> CaseFileModelSpecs
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<CaseFileModelSpec>(this, global::Luminis.Its.Workbench.RootCaseFileEntity.CaseFileEntityDomainRoleId);
			}
		}
		#endregion
		#region ModelEntity opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelEntity.
		/// Description for
		/// Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.CaseFileEntity
		/// </summary>
		public virtual ModelEntity ModelEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.CaseFileEntityDomainRoleId) as ModelEntity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.CaseFileEntityDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass CaseFileRelation
	/// Description for Luminis.Its.Workbench.CaseFileRelation
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.CaseFileRelation.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.CaseFileRelation.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9aacdca2-eca2-488e-8cbc-e543995d5f8e")]
	public partial class CaseFileRelation : CaseFileType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CaseFileRelation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9aacdca2, 0xeca2, 0x488e, 0x8c, 0xbc, 0xe5, 0x43, 0x99, 0x5d, 0x5f, 0x8e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CaseFileRelation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CaseFileRelation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ParentCaseFileEntity opposite domain role accessor
		/// <summary>
		/// Gets or sets ParentCaseFileEntity.
		/// Description for
		/// Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.CaseFileRelation
		/// </summary>
		public virtual CaseFileEntity ParentCaseFileEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.CaseFileRelationDomainRoleId) as CaseFileEntity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileEntityReferencesChildCaseFileRelations.CaseFileRelationDomainRoleId, value);
			}
		}
		#endregion
		#region ChildCaseFileEntity opposite domain role accessor
		/// <summary>
		/// Gets or sets ChildCaseFileEntity.
		/// Description for
		/// Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileRelation
		/// </summary>
		public virtual CaseFileEntity ChildCaseFileEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileRelationDomainRoleId) as CaseFileEntity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileRelationReferencesChildCaseFileEntity.CaseFileRelationDomainRoleId, value);
			}
		}
		#endregion
		#region ModelRelation opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRelation.
		/// Description for
		/// Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.CaseFileRelation
		/// </summary>
		public virtual ModelRelation ModelRelation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.CaseFileRelationDomainRoleId) as ModelRelation;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.CaseFileRelationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass ModelRelation
	/// Description for Luminis.Its.Workbench.ModelRelation
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelRelation.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelRelation.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("75b90a61-e133-4c4f-b361-e394f1a5df81")]
	public partial class ModelRelation : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelRelation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x75b90a61, 0xe133, 0x4c4f, 0xb3, 0x61, 0xe3, 0x94, 0xf1, 0xa5, 0xdf, 0x81);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRelation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRelation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// Description for Luminis.Its.Workbench.EntityHasRelations.ModelRelation
		/// </summary>
		public virtual ModelEntity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.EntityHasRelations.ModelRelationDomainRoleId) as ModelEntity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.EntityHasRelations.ModelRelationDomainRoleId, value);
			}
		}
		#endregion
		#region ModelEntity opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelEntity.
		/// Description for Luminis.Its.Workbench.RelationHasEntity.ModelRelation
		/// </summary>
		public virtual ModelEntity ModelEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Luminis.Its.Workbench.RelationHasEntity.ModelRelationDomainRoleId) as ModelEntity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Luminis.Its.Workbench.RelationHasEntity.ModelRelationDomainRoleId, value);
			}
		}
		#endregion
		#region CaseFileRelations opposite domain role accessor
		/// <summary>
		/// Gets a list of CaseFileRelations.
		/// Description for
		/// Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.ModelRelation
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CaseFileRelation> CaseFileRelations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<CaseFileRelation>(this, global::Luminis.Its.Workbench.CaseFileRelationReferencesModelRelation.ModelRelationDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass ModelComplexType
	/// Description for Luminis.Its.Workbench.ModelComplexType
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelComplexType.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelComplexType.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("38ebc3f7-d838-4e0f-b1d6-46fa64a00769")]
	public partial class ModelComplexType : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelComplexType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x38ebc3f7, 0xd838, 0x4e0f, 0xb1, 0xd6, 0x46, 0xfa, 0x64, 0xa0, 0x07, 0x69);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelComplexType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelComplexType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelTypes opposite domain role accessor
		/// <summary>
		/// Gets a list of ModelTypes.
		/// Description for
		/// Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.ModelComplexType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> ModelTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelType>(this, global::Luminis.Its.Workbench.ModelTypeReferencesModelComplexTypes.ModelComplexTypeDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainClass ModelEntity
	/// Description for Luminis.Its.Workbench.ModelEntity
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.ModelEntity.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.ModelEntity.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f28c4378-947b-4f0f-8787-3c63b9b1f73b")]
	public partial class ModelEntity : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelEntity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf28c4378, 0x947b, 0x4f0f, 0x87, 0x87, 0x3c, 0x63, 0xb9, 0xb1, 0xf7, 0x3b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelEntity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelEntity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ToRelations opposite domain role accessor
		/// <summary>
		/// Gets a list of ToRelations.
		/// Description for Luminis.Its.Workbench.EntityHasRelations.ModelEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelRelation> ToRelations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelRelation>(this, global::Luminis.Its.Workbench.EntityHasRelations.ModelEntityDomainRoleId);
			}
		}
		#endregion
		#region Relations opposite domain role accessor
		/// <summary>
		/// Gets a list of Relations.
		/// Description for Luminis.Its.Workbench.RelationHasEntity.ModelEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelRelation> Relations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelRelation>(this, global::Luminis.Its.Workbench.RelationHasEntity.ModelEntityDomainRoleId);
			}
		}
		#endregion
		#region CaseFileEntities opposite domain role accessor
		/// <summary>
		/// Gets a list of CaseFileEntities.
		/// Description for
		/// Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.ModelEntity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CaseFileEntity> CaseFileEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<CaseFileEntity>(this, global::Luminis.Its.Workbench.CaseFileEntityReferencesModelEntity.ModelEntityDomainRoleId);
			}
		}
		#endregion
	}
}
