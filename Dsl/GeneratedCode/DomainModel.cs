//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;


namespace Luminis.Its.Workbench
{
	/// <summary>
	/// DomainModel WorkbenchDomainModel
	/// Description for Luminis.Its.Workbench.Workbench
	/// </summary>
	[DslDesign::DisplayNameResource("Luminis.Its.Workbench.WorkbenchDomainModel.DisplayName", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Luminis.Its.Workbench.WorkbenchDomainModel.Description", typeof(global::Luminis.Its.Workbench.WorkbenchDomainModel), "Luminis.Its.Workbench.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("1ed0c2a9-2a9e-43d2-8fe6-3d731d161d11")]
	public partial class WorkbenchDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// WorkbenchDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x1ed0c2a9, 0x2a9e, 0x43d2, 0x8f, 0xe6, 0x3d, 0x73, 0x1d, 0x16, 0x1d, 0x11);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public WorkbenchDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
		}
		
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(NamedElement),
				typeof(ModelRoot),
				typeof(ModelAttribute),
				typeof(Comment),
				typeof(ModelType),
				typeof(ObjectModelElement),
				typeof(ObjectModelSpec),
				typeof(CaseFileModelSpec),
				typeof(CaseFileType),
				typeof(CaseFileEntity),
				typeof(CaseFileRelation),
				typeof(ModelRelation),
				typeof(ModelComplexType),
				typeof(ModelEntity),
				typeof(ModelRootHasComments),
				typeof(CommentReferencesSubjects),
				typeof(HasObjectModelSpec),
				typeof(ObjectModelSpecHasTypes),
				typeof(HasCaseFileModelSpec),
				typeof(CaseFileModelSpecHasCaseFileTypes),
				typeof(ModelTypeHasAttributes),
				typeof(EntityHasRelations),
				typeof(RelationHasEntity),
				typeof(ModelTypeReferencesModelComplexTypes),
				typeof(CaseFileEntityReferencesChildCaseFileRelations),
				typeof(CaseFileRelationReferencesChildCaseFileEntity),
				typeof(RootCaseFileEntity),
				typeof(CaseFileEntityReferencesModelEntity),
				typeof(CaseFileRelationReferencesModelRelation),
				typeof(ClassDiagram),
				typeof(EntityConnector),
				typeof(CommentConnector),
				typeof(CaseFileElementConnector),
				typeof(CaseFileToModelConnector),
				typeof(RelationConnector),
				typeof(ComplexTypeConnector),
				typeof(ObjectModelLane),
				typeof(CaseFileSpecLane),
				typeof(CommentBoxShape),
				typeof(CaseFileEntityShape),
				typeof(CaseFileRelationShape),
				typeof(ModelEntityShape),
				typeof(ModelRelationShape),
				typeof(ModelComplexTypeShape),
				typeof(global::Luminis.Its.Workbench.FixUpDiagram),
				typeof(global::Luminis.Its.Workbench.DecoratorPropertyChanged),
				typeof(global::Luminis.Its.Workbench.ConnectorRolePlayerChanged),
				typeof(global::Luminis.Its.Workbench.CompartmentItemAddRule),
				typeof(global::Luminis.Its.Workbench.CompartmentItemDeleteRule),
				typeof(global::Luminis.Its.Workbench.CompartmentItemRolePlayerChangeRule),
				typeof(global::Luminis.Its.Workbench.CompartmentItemRolePlayerPositionChangeRule),
				typeof(global::Luminis.Its.Workbench.CompartmentItemChangeRule),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(NamedElement), "Name", NamedElement.NameDomainPropertyId, typeof(NamedElement.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ModelAttribute), "Type", ModelAttribute.TypeDomainPropertyId, typeof(ModelAttribute.TypePropertyHandler)),
				new DomainMemberInfo(typeof(ModelAttribute), "InitialValue", ModelAttribute.InitialValueDomainPropertyId, typeof(ModelAttribute.InitialValuePropertyHandler)),
				new DomainMemberInfo(typeof(ModelAttribute), "Required", ModelAttribute.RequiredDomainPropertyId, typeof(ModelAttribute.RequiredPropertyHandler)),
				new DomainMemberInfo(typeof(Comment), "Text", Comment.TextDomainPropertyId, typeof(Comment.TextPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectModelElement), "Description", ObjectModelElement.DescriptionDomainPropertyId, typeof(ObjectModelElement.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectModelSpec), "Self", ObjectModelSpec.SelfDomainPropertyId, typeof(ObjectModelSpec.SelfPropertyHandler)),
				new DomainMemberInfo(typeof(CaseFileModelSpec), "UriTemplate", CaseFileModelSpec.UriTemplateDomainPropertyId, typeof(CaseFileModelSpec.UriTemplatePropertyHandler)),
				new DomainMemberInfo(typeof(CaseFileModelSpec), "Self", CaseFileModelSpec.SelfDomainPropertyId, typeof(CaseFileModelSpec.SelfPropertyHandler)),
				new DomainMemberInfo(typeof(CaseFileModelSpec), "ObjectModelSpec", CaseFileModelSpec.ObjectModelSpecDomainPropertyId, typeof(CaseFileModelSpec.ObjectModelSpecPropertyHandler)),
				new DomainMemberInfo(typeof(ModelTypeReferencesModelComplexTypes), "ContainerName", ModelTypeReferencesModelComplexTypes.ContainerNameDomainPropertyId, typeof(ModelTypeReferencesModelComplexTypes.ContainerNamePropertyHandler)),
				new DomainMemberInfo(typeof(ModelTypeReferencesModelComplexTypes), "IsCollection", ModelTypeReferencesModelComplexTypes.IsCollectionDomainPropertyId, typeof(ModelTypeReferencesModelComplexTypes.IsCollectionPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(ModelRootHasComments), "ModelRoot", ModelRootHasComments.ModelRootDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelRootHasComments), "Comment", ModelRootHasComments.CommentDomainRoleId),
				new DomainRolePlayerInfo(typeof(CommentReferencesSubjects), "Comment", CommentReferencesSubjects.CommentDomainRoleId),
				new DomainRolePlayerInfo(typeof(CommentReferencesSubjects), "Subject", CommentReferencesSubjects.SubjectDomainRoleId),
				new DomainRolePlayerInfo(typeof(HasObjectModelSpec), "ModelRoot", HasObjectModelSpec.ModelRootDomainRoleId),
				new DomainRolePlayerInfo(typeof(HasObjectModelSpec), "ObjectModelSpec", HasObjectModelSpec.ObjectModelSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectModelSpecHasTypes), "ObjectModelSpec", ObjectModelSpecHasTypes.ObjectModelSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectModelSpecHasTypes), "ModelType", ObjectModelSpecHasTypes.ModelTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(HasCaseFileModelSpec), "ModelRoot", HasCaseFileModelSpec.ModelRootDomainRoleId),
				new DomainRolePlayerInfo(typeof(HasCaseFileModelSpec), "CaseFileModelSpec", HasCaseFileModelSpec.CaseFileModelSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(CaseFileModelSpecHasCaseFileTypes), "CaseFileModelSpec", CaseFileModelSpecHasCaseFileTypes.CaseFileModelSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(CaseFileModelSpecHasCaseFileTypes), "CaseFileType", CaseFileModelSpecHasCaseFileTypes.CaseFileTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelTypeHasAttributes), "ModelType", ModelTypeHasAttributes.ModelTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelTypeHasAttributes), "ModelAttribute", ModelTypeHasAttributes.ModelAttributeDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasRelations), "ModelEntity", EntityHasRelations.ModelEntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasRelations), "ModelRelation", EntityHasRelations.ModelRelationDomainRoleId),
				new DomainRolePlayerInfo(typeof(RelationHasEntity), "ModelRelation", RelationHasEntity.ModelRelationDomainRoleId),
				new DomainRolePlayerInfo(typeof(RelationHasEntity), "ModelEntity", RelationHasEntity.ModelEntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelTypeReferencesModelComplexTypes), "ModelType", ModelTypeReferencesModelComplexTypes.ModelTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelTypeReferencesModelComplexTypes), "ModelComplexType", ModelTypeReferencesModelComplexTypes.ModelComplexTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(CaseFileEntityReferencesChildCaseFileRelations), "CaseFileEntity", CaseFileEntityReferencesChildCaseFileRelations.CaseFileEntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(CaseFileEntityReferencesChildCaseFileRelations), "CaseFileRelation", CaseFileEntityReferencesChildCaseFileRelations.CaseFileRelationDomainRoleId),
				new DomainRolePlayerInfo(typeof(CaseFileRelationReferencesChildCaseFileEntity), "CaseFileRelation", CaseFileRelationReferencesChildCaseFileEntity.CaseFileRelationDomainRoleId),
				new DomainRolePlayerInfo(typeof(CaseFileRelationReferencesChildCaseFileEntity), "CaseFileEntity", CaseFileRelationReferencesChildCaseFileEntity.CaseFileEntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(RootCaseFileEntity), "CaseFileModelSpec", RootCaseFileEntity.CaseFileModelSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(RootCaseFileEntity), "CaseFileEntity", RootCaseFileEntity.CaseFileEntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(CaseFileEntityReferencesModelEntity), "CaseFileEntity", CaseFileEntityReferencesModelEntity.CaseFileEntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(CaseFileEntityReferencesModelEntity), "ModelEntity", CaseFileEntityReferencesModelEntity.ModelEntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(CaseFileRelationReferencesModelRelation), "CaseFileRelation", CaseFileRelationReferencesModelRelation.CaseFileRelationDomainRoleId),
				new DomainRolePlayerInfo(typeof(CaseFileRelationReferencesModelRelation), "ModelRelation", CaseFileRelationReferencesModelRelation.ModelRelationDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(29);
				createElementMap.Add(typeof(ModelRoot), 0);
				createElementMap.Add(typeof(ModelAttribute), 1);
				createElementMap.Add(typeof(Comment), 2);
				createElementMap.Add(typeof(ObjectModelSpec), 3);
				createElementMap.Add(typeof(CaseFileModelSpec), 4);
				createElementMap.Add(typeof(CaseFileEntity), 5);
				createElementMap.Add(typeof(CaseFileRelation), 6);
				createElementMap.Add(typeof(ModelRelation), 7);
				createElementMap.Add(typeof(ModelComplexType), 8);
				createElementMap.Add(typeof(ModelEntity), 9);
				createElementMap.Add(typeof(ClassDiagram), 10);
				createElementMap.Add(typeof(EntityConnector), 11);
				createElementMap.Add(typeof(CommentConnector), 12);
				createElementMap.Add(typeof(CaseFileElementConnector), 13);
				createElementMap.Add(typeof(CaseFileToModelConnector), 14);
				createElementMap.Add(typeof(RelationConnector), 15);
				createElementMap.Add(typeof(ComplexTypeConnector), 16);
				createElementMap.Add(typeof(ObjectModelLane), 17);
				createElementMap.Add(typeof(CaseFileSpecLane), 18);
				createElementMap.Add(typeof(CommentBoxShape), 19);
				createElementMap.Add(typeof(CaseFileEntityShape), 20);
				createElementMap.Add(typeof(CaseFileRelationShape), 21);
				createElementMap.Add(typeof(ModelEntityShape), 22);
				createElementMap.Add(typeof(ModelRelationShape), 23);
				createElementMap.Add(typeof(ModelComplexTypeShape), 24);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Luminis.Its.Workbench.WorkbenchDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new ModelRoot(partition, propertyAssignments);
				case 1: return new ModelAttribute(partition, propertyAssignments);
				case 2: return new Comment(partition, propertyAssignments);
				case 3: return new ObjectModelSpec(partition, propertyAssignments);
				case 4: return new CaseFileModelSpec(partition, propertyAssignments);
				case 5: return new CaseFileEntity(partition, propertyAssignments);
				case 6: return new CaseFileRelation(partition, propertyAssignments);
				case 7: return new ModelRelation(partition, propertyAssignments);
				case 8: return new ModelComplexType(partition, propertyAssignments);
				case 9: return new ModelEntity(partition, propertyAssignments);
				case 10: return new ClassDiagram(partition, propertyAssignments);
				case 11: return new EntityConnector(partition, propertyAssignments);
				case 12: return new CommentConnector(partition, propertyAssignments);
				case 13: return new CaseFileElementConnector(partition, propertyAssignments);
				case 14: return new CaseFileToModelConnector(partition, propertyAssignments);
				case 15: return new RelationConnector(partition, propertyAssignments);
				case 16: return new ComplexTypeConnector(partition, propertyAssignments);
				case 17: return new ObjectModelLane(partition, propertyAssignments);
				case 18: return new CaseFileSpecLane(partition, propertyAssignments);
				case 19: return new CommentBoxShape(partition, propertyAssignments);
				case 20: return new CaseFileEntityShape(partition, propertyAssignments);
				case 21: return new CaseFileRelationShape(partition, propertyAssignments);
				case 22: return new ModelEntityShape(partition, propertyAssignments);
				case 23: return new ModelRelationShape(partition, propertyAssignments);
				case 24: return new ModelComplexTypeShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(15);
				createElementLinkMap.Add(typeof(ModelRootHasComments), 0);
				createElementLinkMap.Add(typeof(CommentReferencesSubjects), 1);
				createElementLinkMap.Add(typeof(HasObjectModelSpec), 2);
				createElementLinkMap.Add(typeof(ObjectModelSpecHasTypes), 3);
				createElementLinkMap.Add(typeof(HasCaseFileModelSpec), 4);
				createElementLinkMap.Add(typeof(CaseFileModelSpecHasCaseFileTypes), 5);
				createElementLinkMap.Add(typeof(ModelTypeHasAttributes), 6);
				createElementLinkMap.Add(typeof(EntityHasRelations), 7);
				createElementLinkMap.Add(typeof(RelationHasEntity), 8);
				createElementLinkMap.Add(typeof(ModelTypeReferencesModelComplexTypes), 9);
				createElementLinkMap.Add(typeof(CaseFileEntityReferencesChildCaseFileRelations), 10);
				createElementLinkMap.Add(typeof(CaseFileRelationReferencesChildCaseFileEntity), 11);
				createElementLinkMap.Add(typeof(RootCaseFileEntity), 12);
				createElementLinkMap.Add(typeof(CaseFileEntityReferencesModelEntity), 13);
				createElementLinkMap.Add(typeof(CaseFileRelationReferencesModelRelation), 14);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Luminis.Its.Workbench.WorkbenchDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new ModelRootHasComments(partition, roleAssignments, propertyAssignments);
				case 1: return new CommentReferencesSubjects(partition, roleAssignments, propertyAssignments);
				case 2: return new HasObjectModelSpec(partition, roleAssignments, propertyAssignments);
				case 3: return new ObjectModelSpecHasTypes(partition, roleAssignments, propertyAssignments);
				case 4: return new HasCaseFileModelSpec(partition, roleAssignments, propertyAssignments);
				case 5: return new CaseFileModelSpecHasCaseFileTypes(partition, roleAssignments, propertyAssignments);
				case 6: return new ModelTypeHasAttributes(partition, roleAssignments, propertyAssignments);
				case 7: return new EntityHasRelations(partition, roleAssignments, propertyAssignments);
				case 8: return new RelationHasEntity(partition, roleAssignments, propertyAssignments);
				case 9: return new ModelTypeReferencesModelComplexTypes(partition, roleAssignments, propertyAssignments);
				case 10: return new CaseFileEntityReferencesChildCaseFileRelations(partition, roleAssignments, propertyAssignments);
				case 11: return new CaseFileRelationReferencesChildCaseFileEntity(partition, roleAssignments, propertyAssignments);
				case 12: return new RootCaseFileEntity(partition, roleAssignments, propertyAssignments);
				case 13: return new CaseFileEntityReferencesModelEntity(partition, roleAssignments, propertyAssignments);
				case 14: return new CaseFileRelationReferencesModelRelation(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Luminis.Its.Workbench.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return WorkbenchDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (WorkbenchDomainModel.resourceManager == null)
				{
					WorkbenchDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(WorkbenchDomainModel).Assembly);
				}
				return WorkbenchDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return WorkbenchDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return WorkbenchDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (WorkbenchDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new WorkbenchCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					WorkbenchDomainModel.copyClosure = copyFilter;
				}
				return WorkbenchDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (WorkbenchDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new WorkbenchDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					WorkbenchDomainModel.removeClosure = removeFilter;
				}
				return WorkbenchDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::Luminis.Its.Workbench.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::Luminis.Its.Workbench.DecoratorPropertyChanged));
			ruleManager.EnableRule(typeof(global::Luminis.Its.Workbench.ConnectorRolePlayerChanged));
			ruleManager.EnableRule(typeof(global::Luminis.Its.Workbench.CompartmentItemAddRule));
			ruleManager.EnableRule(typeof(global::Luminis.Its.Workbench.CompartmentItemDeleteRule));
			ruleManager.EnableRule(typeof(global::Luminis.Its.Workbench.CompartmentItemRolePlayerChangeRule));
			ruleManager.EnableRule(typeof(global::Luminis.Its.Workbench.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.EnableRule(typeof(global::Luminis.Its.Workbench.CompartmentItemChangeRule));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::Luminis.Its.Workbench.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::Luminis.Its.Workbench.DecoratorPropertyChanged));
			ruleManager.DisableRule(typeof(global::Luminis.Its.Workbench.ConnectorRolePlayerChanged));
			ruleManager.DisableRule(typeof(global::Luminis.Its.Workbench.CompartmentItemAddRule));
			ruleManager.DisableRule(typeof(global::Luminis.Its.Workbench.CompartmentItemDeleteRule));
			ruleManager.DisableRule(typeof(global::Luminis.Its.Workbench.CompartmentItemRolePlayerChangeRule));
			ruleManager.DisableRule(typeof(global::Luminis.Its.Workbench.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.DisableRule(typeof(global::Luminis.Its.Workbench.CompartmentItemChangeRule));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class WorkbenchDeleteClosure : WorkbenchDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public WorkbenchDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	public partial class WorkbenchDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public WorkbenchDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Luminis.Its.Workbench.ModelRootHasComments.CommentDomainRoleId, true);
			DomainRoles.Add(global::Luminis.Its.Workbench.HasObjectModelSpec.ObjectModelSpecDomainRoleId, true);
			DomainRoles.Add(global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.ModelTypeDomainRoleId, true);
			DomainRoles.Add(global::Luminis.Its.Workbench.HasCaseFileModelSpec.CaseFileModelSpecDomainRoleId, true);
			DomainRoles.Add(global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileTypeDomainRoleId, true);
			DomainRoles.Add(global::Luminis.Its.Workbench.ModelTypeHasAttributes.ModelAttributeDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class WorkbenchCopyClosure : WorkbenchCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public WorkbenchCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	public partial class WorkbenchCopyClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public WorkbenchCopyClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Luminis.Its.Workbench.HasObjectModelSpec.ObjectModelSpecDomainRoleId, true);
			DomainRoles.Add(global::Luminis.Its.Workbench.ObjectModelSpecHasTypes.ModelTypeDomainRoleId, true);
			DomainRoles.Add(global::Luminis.Its.Workbench.HasCaseFileModelSpec.CaseFileModelSpecDomainRoleId, true);
			DomainRoles.Add(global::Luminis.Its.Workbench.CaseFileModelSpecHasCaseFileTypes.CaseFileTypeDomainRoleId, true);
			DomainRoles.Add(global::Luminis.Its.Workbench.ModelTypeHasAttributes.ModelAttributeDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			if (sourceRoleInfo == null) throw new global::System.ArgumentNullException("sourceRoleInfo");
			return this.DomainRoles.Contains(sourceRoleInfo.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	#endregion
		
}

